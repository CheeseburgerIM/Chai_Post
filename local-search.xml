<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Github推送插件</title>
    <link href="/Post/2022/GithubDeploy/"/>
    <url>/Post/2022/GithubDeploy/</url>
    
    <content type="html"><![CDATA[<h1 id="github"><a class="markdownIt-Anchor" href="#github"></a> Github</h1><h1 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法"></a> 解决方法</h1><blockquote><p>以Vue项目为例，打包后的文件都放在<code>./dist/</code>目录下，现在想把其中的文件推送到Github的某一仓库下</p></blockquote><ol><li>在Github创建仓库 - 假设仓库名为<code>DeployTest</code></li><li>在Vue项目的同级目录下创建一个新的文件夹<code>Hexo</code></li></ol><p><img src="/.space//1.png" srcset="/img/404_GIF.gif" lazyload alt></p><ol start="3"><li>安装<code>hexo</code> - 具体操作步骤可查看<a href="https://hexo.io/zh-cn/">官方文档</a></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">执行命令进行安装</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install hexo-cli -g</span><br></code></pre></td></tr></table></figure><ol start="4"><li>新建hexo项目</li></ol><ul><li>进入<code>Hexo</code>目录</li><li>初始化hexo</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo init</span><br></code></pre></td></tr></table></figure><ol start="5"><li>安装部署插件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo install hexo-deployer-git --save</span><br></code></pre></td></tr></table></figure><ol start="6"><li>修改插件代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 在node_modules中找到hexo-deployer-git文件夹</span><br><span class="hljs-comment">// 修改其中的/lib/deployer.js文件</span><br><span class="hljs-comment">// hexo-deployer-git/lib/deployer.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>    ...<br>    <span class="hljs-comment">// const publicDir = this.public_dir;</span><br>    <span class="hljs-keyword">const</span> publicDir = args.<span class="hljs-property">public_dir</span>;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><ol start="7"><li>修改配置文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 修改Hexo文件夹下的_config.yml文件</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;git&#x27;</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&#x27;git@github.com:CheeseburgerIM/DeployTest.git&#x27;</span><br>  <span class="hljs-attr">barnch:</span> <span class="hljs-string">&#x27;main&#x27;</span><br>  <span class="hljs-attr">public_dir:</span> <span class="hljs-string">&#x27;../Vue/dist/&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="提交测试"><a class="markdownIt-Anchor" href="#提交测试"></a> 提交测试</h1><ol><li>Vue路径下打包Vue项目</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm run build</span><br></code></pre></td></tr></table></figure><ol start="2"><li>Hexo路径下提交代码</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo g</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo d</span><br></code></pre></td></tr></table></figure><ol start="3"><li>推送成功！！！</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构03 - 栈、队列和数组</title>
    <link href="/Post/Master/Profession/DataStructure/DataStructure03/"/>
    <url>/Post/Master/Profession/DataStructure/DataStructure03/</url>
    
    <content type="html"><![CDATA[<blockquote><p>相关代码：<a href="https://gitee.com/CheeseburgerIM/Chai_Code/tree/master/TJU/Master/Profession/DataStructure/DataStructure03">https://gitee.com/CheeseburgerIM/Chai_Code/tree/master/TJU/Master/Profession/DataStructure/DataStructure03</a></p></blockquote><h1 id="栈"><a class="markdownIt-Anchor" href="#栈"></a> 栈</h1><h2 id="栈的基本概念"><a class="markdownIt-Anchor" href="#栈的基本概念"></a> 栈的基本概念</h2><p><strong>栈(Stack)是只允许在一端进行插入或删除的线性表</strong></p><ul><li>栈顶 - Top：线性表中允许进行插入或删除操作的一端</li><li>栈底 - Bottom：固定的，不允许进行插入或删除操作的一端</li><li>栈的操作特性可以明显地概括为后进先出</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构02 - 线性表</title>
    <link href="/Post/Master/Profession/DataStructure/DataStructure02/"/>
    <url>/Post/Master/Profession/DataStructure/DataStructure02/</url>
    
    <content type="html"><![CDATA[<blockquote><p>相关代码：<a href="https://gitee.com/CheeseburgerIM/Chai_Code/tree/master/TJU/Master/Profession/DataStructure/DataStructure02">https://gitee.com/CheeseburgerIM/Chai_Code/tree/master/TJU/Master/Profession/DataStructure/DataStructure02</a></p></blockquote><h1 id="线性表的定义和基本操作"><a class="markdownIt-Anchor" href="#线性表的定义和基本操作"></a> 线性表的定义和基本操作</h1><h2 id="线性表的定义"><a class="markdownIt-Anchor" href="#线性表的定义"></a> 线性表的定义</h2><ul><li>线性表是一种典型的线性结构(逻辑结构)</li><li>线性表是具有相同数据类型的n(n≥0)各数据元素的有限序列<ul><li>数据元素的<strong>类型相同</strong></li><li><strong>有限</strong></li><li><strong>序列</strong>：具有前驱或后继的顺序关系</li></ul></li><li>若用L命名线性表，则其一般表示为<ul><li>L=(a1, a2, …, an)</li></ul></li><li>线性表的特点：<ul><li>表中元素的个数有限</li><li>表中元素具有逻辑上的顺序性，表中元素有其先后顺序</li><li>表中元素都是数据元素，每个元素都是单个元素</li><li>表中元素的数据类型都相同，这意味着每个元素占有相同大小的存储空间</li><li>表中元素具有抽象性，即仅讨论元素之间的逻辑关系，而不考虑元素究竟表示什么内容</li><li>非空的线性表中<ul><li>有且仅有一个开始结点a1，它没有直接前驱，而仅有一个直接后继a2</li><li>有且仅有一个终端结点an，它没有直接后继，而仅有一个直接前驱an-1</li><li>其余的内部结点ai都有且仅有一个直接前驱ai-1和一个直接后继ai+1</li></ul></li></ul></li><li><strong>注意</strong>：线性表是一种逻辑结构，表示元素之间一对一的相邻关系，顺序表和链表是指存储结构，两者属于不同层面的概念，因此不要将其混淆</li><li>同一线性表中的元素必定具有相同特性，数据元素间的关系是线性关系<ul><li>线性表中数据元素的类型可以为简单类型，也可以为复杂类型</li></ul></li></ul><h2 id="线性表的基本操作"><a class="markdownIt-Anchor" href="#线性表的基本操作"></a> 线性表的基本操作</h2><ul><li>初始化表：构造一个空的线性表</li><li>求表长：返回线性表L的长度，即L中数据元素的个数</li><li>按值查找操作：在表L中查找具有给定关键字值的元素</li><li>按位查找操作：获取表L中第i个位置的元素的值</li><li>插入操作：在表L中的第i个位置上插入指定元素e</li><li>删除操作：删除表L中第i个位置的元素，并用e返回删除元素的值</li><li>输出操作：按前后顺序输出线性表L的所有元素</li><li>寻找前驱/后继：查找给定结点的直接前驱结点或直接后继结点</li><li>判空操作：若L为空表，则返回true；否则返回false</li><li>清空操作：将线性表L置为空表</li><li>销毁操作：销毁线性表，并释放线性表L所占用的内存空间</li></ul><h1 id="线性表的顺序表示"><a class="markdownIt-Anchor" href="#线性表的顺序表示"></a> 线性表的顺序表示</h1><h2 id="顺序表的定义"><a class="markdownIt-Anchor" href="#顺序表的定义"></a> 顺序表的定义</h2><ul><li>线性表的顺序存储又称顺序表，也可称为顺序映像</li><li>顺序表是用一组地址连续的存储单元依次存储线性表中的数据元素，从而使得逻辑上相邻的两个元素在物理位置上也相邻</li><li>因此，顺序表的特点是表中元素的<strong>逻辑顺序与其物理顺序相同</strong></li><li>线性表的第一个数据元素ai的存储位置，成为线性表的<strong>起始位置</strong>或<strong>基地址</strong><ul><li>线性表顺序存储结构占用一片连续的存储空间，所以如果知道某个元素的存储位置就可以计算其他元素的存储位置</li></ul></li><li>实现方式分为静态分配和动态分配两种</li><li><strong>顺序表的特点</strong>：<ol><li><strong>随机访问</strong>：可以在O(1)时间内找到第i个元素</li><li><strong>存储密度高</strong>：每个节点只存储数据元素，不会占用额外的空间资源</li><li><strong>拓展容量不方便</strong>：静态顺序表无法改变长度；即便采用动态分配的方式实现，改变长度的时间复杂度也比较高</li><li><strong>插入、删除操作不方便</strong>：需要移动大量的元素</li></ol></li></ul><h1 id="线性表的链式表示"><a class="markdownIt-Anchor" href="#线性表的链式表示"></a> 线性表的链式表示</h1><p>顺序表可以随时存取表中的任意一个元素，它的存储位置可以用一个简单直观的公式表示，但插入和删除操作需要移动大量元素。链式存储线性表时，不需要使用地址连续的存储单元，即不要求逻辑上相邻的元素在物理位置上也连续，它通过“链”建立起数据元素之间的逻辑关系，因此插入和删除操作不需要移动元素，而只需要修改指针，但也会失去顺序表可随机存取的优点</p><h2 id="单链表的定义"><a class="markdownIt-Anchor" href="#单链表的定义"></a> 单链表的定义</h2><ul><li>线性表的链式存储又称单链表，它是指通过一组任意的存储单元来存储线性表中的数据元素</li><li>为了建立数据元素之间的线性关系，对每个链表结点，除存放元素自身的信息外，还需要存放以恶搞指向其后继的指针</li><li>单链表结点的结构图如下所示，其中data为数据域，存放数据元素；next为指针域，存放其后继结点的地址</li></ul><p><img src="/.space//1.png" srcset="/img/404_GIF.gif" lazyload alt></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span><br>&#123;<br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span> *next;<br>&#125; LNode, *LinkList;<br></code></pre></td></tr></table></figure><ul><li>利用单链表可以解决顺序表需要大量连续存储单元的缺点</li><li>但单链表附加指针域，也存在浪费存储空间的缺点，即存储密度低</li><li>由于单链表的元素离散地分布在存储空间中，所以单链表是非随机存取的存储结构<ul><li>即不能直接找到表中某个特定的结点</li><li>查找某个特定的结点时，需要从表头开始遍历，依次查找</li></ul></li></ul><p>通常用头指针来标识一个单链表，如单链表L，头指针为NULL时表示一个空表。此外，为了操作上的方便，在单链表第一个结点之前附加一个结点，称为头结点。头结点的数据域可以不设任何信息，也可以记录表长等信息。头结点的指针域指向线性表的第一个元素节点，如下图所示</p><p><img src="/.space//2.png" srcset="/img/404_GIF.gif" lazyload alt></p><p>头结点和头指针的区分：不管带不带头结点，头指针都始终指向链表的第一个结点，而头结点是带头结点的链表中的第一个结点，结点内通常不存储信息。引入头结点后，可以带来以下两个优点</p><ol><li>由于第一个数据结点的位置被存放在头结点的指针域中，因此在链表的第一个位置上的操作和在表的其他位置上的操作一致，无须进行特殊处理</li><li>无论链表是否为空，其头指针都指向头结点的非空指针(空表中头结点的指针域为空)，因此空表和非空表的处理也就得到了统一</li></ol><h2 id="单链表上基本操作的实现"><a class="markdownIt-Anchor" href="#单链表上基本操作的实现"></a> 单链表上基本操作的实现</h2><ol><li>采用头插法建立单链表</li><li>采用尾插法建立单链表</li><li>按序号查找结点值</li><li>按值查找表结点</li><li>插入结点操作</li><li>删除结点操作</li><li>求表长操作</li></ol><h2 id="双链表"><a class="markdownIt-Anchor" href="#双链表"></a> 双链表</h2><p>单链表结点中只有一个指向其后继的指针，使得单链表只能从头结点依次顺序地向后遍历。要访问某个结点的前驱结点(插入、删除操作时)，只能从头开始遍历，访问后继结点的时间复杂度为O(1)，访问前驱结点的时间复杂度为O(n)</p><p>为了克服单链表的上述缺点，引入了双链表，双链表结点中有两个指针<code>prior</code>和<code>next</code>，分别指向其前驱结点和后继结点</p><p><img src="/.space//3.png" srcset="/img/404_GIF.gif" lazyload alt></p><p>双链表中结点类型的描述如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">DNode</span> &#123;<br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">DNode</span> *prior,*next;<br>&#125; DNode, *DLinkList;<br></code></pre></td></tr></table></figure><p>双链表在单链表的结点中增加了一个指向其前驱的<code>prior</code>指针，因此双链表中按值查找和按位查找的操作与单链表的相同，但双链表在插入和删除操作的实现上与单链表有较大的不同。这是因为“链”变化时也需要对<code>prior</code>指针做出修改，其关键是保证在修改的过程中不断链。此外，双链表可以很方便地找到其前驱结点，因此，插入、删除操作的时间复杂度仅为O(1)</p><h3 id="双链表的基本操作"><a class="markdownIt-Anchor" href="#双链表的基本操作"></a> 双链表的基本操作</h3><ol><li>双链表的插入操作</li><li>双链表的删除操作</li></ol><h2 id="循环链表"><a class="markdownIt-Anchor" href="#循环链表"></a> 循环链表</h2><h3 id="循环单链表"><a class="markdownIt-Anchor" href="#循环单链表"></a> 循环单链表</h3><p>循环单链表和单链表的区别在于，表中最后一个结点的指针不是NULL，二十指向头结点，从而使整个链表形成一个环</p><p>在循环链表中，不存在指针域为NULL的结点。因此，循环单链表的判空条件不是头结点的指针是否为空，而是它是否等于头指针(是否指向头结点)</p><p><img src="/.space//4.png" srcset="/img/404_GIF.gif" lazyload alt></p><h3 id="循环双链表"><a class="markdownIt-Anchor" href="#循环双链表"></a> 循环双链表</h3><p>由循环单链表的定义不难推出循环双链表。不同的是在循环双链表中，头结点的<code>prior</code>指针要指向表尾结点</p><p><img src="/.space//5.png" srcset="/img/404_GIF.gif" lazyload alt></p><p>在循环双链表L中，表尾结点的<code>next</code>指针指向头结点；当循环双链表为空表时，其头结点的<code>prior</code>和<code>next</code>都指向L(即头结点本身)</p><h2 id="静态链表"><a class="markdownIt-Anchor" href="#静态链表"></a> 静态链表</h2><p>静态链表借助数组来描述线性表的链式存储结构，结点也有数据域<code>data</code>和指针域<code>next</code>，与前面所讲的链表中的指针不同的是，这里的指针是结点的相对地址(数组下标)，又称游标。和顺序表一样，静态表需要预先分配一块连续的内存空间</p><p>静态链表和单链表的对应关系如下图所示</p><p><img src="/.space//6.png" srcset="/img/404_GIF.gif" lazyload alt></p><p>静态链表结构类型的描述如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxSize 50</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-type">int</span> next;<br>&#125; SLinkList[MaxSize];<br></code></pre></td></tr></table></figure><p>静态链表以<code>next==-1</code>作为其结束的标志。静态链表的插入、删除操作与动态链表相同，只需要修改指针，而不需要移动元素。总体来说，静态链表没有单链表使用起来方便，但在一些不支持指针的变成语言中，这是一种非常巧妙的方法</p><h1 id="顺序表和链表的比较"><a class="markdownIt-Anchor" href="#顺序表和链表的比较"></a> 顺序表和链表的比较</h1><ol><li>存取(读写)方式</li></ol><ul><li>顺序表可以顺序存取，也可以随机存取</li><li>链表只能从表头顺序存取元素</li><li>例如在第i个位置上执行存或取的操作<ul><li>顺序表仅需一次访问</li><li>而链表则需从表头开始依次访问i次</li></ul></li></ul><ol start="2"><li>逻辑结构与物理结构</li></ol><ul><li>采用顺序存储时，逻辑上相邻的元素，对应的物理位置也相邻</li><li>采用链式存储时，逻辑上相邻的元素，物理存储位置不一定相邻，对应的逻辑关系是通过指针链接来表示的</li></ul><ol start="3"><li>查找、插入和删除操作</li></ol><ul><li>对于按值查找<ul><li>顺序表无序时，两者的时间复杂度均为O(n)</li><li>顺序表有序时，可采用折半查找，此时的时间复杂度为O(log2n)</li></ul></li><li>对于按位序查找<ul><li>顺序表支持随机访问，时间复杂度仅为O(1)</li><li>链表的平均时间复杂度为O(n)</li></ul></li><li>顺序表的插入、删除操作，平均需要移动半个表长的元素</li><li>链表的插入、删除操作，只需要修改相关结点的指针域即可<ul><li>但由于链表的每个结点都带有与数据本身无关的指针域，因此存储密度比顺序表小</li></ul></li></ul><ol start="4"><li>空间分配</li></ol><ul><li>顺序存储在静态存储分配的情形下，一旦存储空间装满就不能扩充，若再加入新元素，则会出现内存溢出，因此需要预先分配足够大的存储空间<ul><li>预先分配过大，可能会导致顺序表后部大量空间闲置</li><li>预先分配过小，又会造成溢出</li><li>动态存储分配虽然可以扩充存储空间，但需要移动大量元素，导致操作效率降低<ul><li>而且若内存中没有更大块的连续存储空间，则会导致分配失败</li></ul></li></ul></li><li>链式存储的结点空间只在需要时申请分配，只要内存有空间就可以分配，操作灵活、高效。且不需要连续的存储空间</li></ul><hr><blockquote><p>在实际中应该怎样选取存储结构呢？</p></blockquote><ol><li>基于存储的考虑</li></ol><p>难以估计线性表的长度或存储规模时，不宜采用顺序表；链表不用事先估计存储规模，但链表的存储密度较低，显然链式存储结构的存储密度是小于1的</p><ol start="2"><li>基于运算的考虑</li></ol><p>在顺序表中按号访问ai的时间复杂度为O(1)，而链表中按序号访问的时间复杂度为O(n)，因此若经常做的运算是按序号访问数据元素，则显然顺序表由于链表</p><p>在顺序表中进行插入、删除操作时，平均移动表中一半的元素，当数据元素的信息量较大且表较长时，这一点是不应该忽视的；在链表中进行插入、删除操作时，虽然也要找插入位置，但操作主要是比较操作，从这个角度考虑显然后者优于前者</p><ol start="3"><li>基于环境的考虑</li></ol><p>顺序表容易实现，任何高级语言中都有数组类型；链表的操作是基于指针的，相对来讲，前者实现较为简单，这也是用户考虑的一个因素</p><p>总之，两种存储结构各有长短，选择哪一种由实际问题的主要因素决定。通常较稳定的线性表选择顺序存储，而频繁进行插入、删除操作的线性表(即动态性较强)宜选择链式存储</p><hr><ul><li>链式存储结构比顺序存储结构能更方便地表示各种逻辑结构</li><li>顺序存储结构和链式存储结构都可以进行顺序存取</li><li>顺序存储结构只能用于存储线性结构<ul><li>错×：顺序存储方式同样适合图和树</li></ul></li><li>将一个长度为n的一般数组排序的最低时间复杂度为O(nlog2n)</li><li>建立一个长度为n的无序链表的时间复杂度为O(n)</li><li>单链表中，增加一个头结点的目的是方便运算的实现</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构01 - 绪论</title>
    <link href="/Post/Master/Profession/DataStructure/DataStructure01/"/>
    <url>/Post/Master/Profession/DataStructure/DataStructure01/</url>
    
    <content type="html"><![CDATA[<blockquote><p>相关代码：<a href="https://gitee.com/CheeseburgerIM/Chai_Code/tree/master/TJU/Master/Profession/DataStructure/DataStructure01">https://gitee.com/CheeseburgerIM/Chai_Code/tree/master/TJU/Master/Profession/DataStructure/DataStructure01</a></p></blockquote><h1 id="数据结构的基本概念"><a class="markdownIt-Anchor" href="#数据结构的基本概念"></a> 数据结构的基本概念</h1><h2 id="基本概念和术语"><a class="markdownIt-Anchor" href="#基本概念和术语"></a> 基本概念和术语</h2><p>用计算机解决一个问题时，大致需要经过下列几个步骤：</p><ol><li>首先要从具体问题抽象出一个适当的数学模型</li><li>然后设计一个解此数学模型的算法</li><li>最后编出程序，进行测试、调整直至得到最终解答</li></ol><h3 id="数据"><a class="markdownIt-Anchor" href="#数据"></a> 数据</h3><ul><li>数据是信息的载体，是描述客观事物属性的数、字符以及所有能输入到计算机中并被计算机程序识别和处理的符号的集合</li><li>数据是计算机程序加工的原料</li></ul><h3 id="数据元素"><a class="markdownIt-Anchor" href="#数据元素"></a> 数据元素</h3><ul><li>数据的基本单位，在计算机程序中通常作为一个整体进行考虑和处理</li><li>也简称为元素，或称为记录、结点或顶点</li><li>一个数据元素可由若干数据项组成</li></ul><h3 id="数据项"><a class="markdownIt-Anchor" href="#数据项"></a> 数据项</h3><ul><li><p>构成数据元素的不可分割的最小单位</p></li><li><p>数据 ＞ 数据元素 ＞ 数据项</p><ul><li>例如：学生表 ＞ 个人纪录 ＞ 学号、姓名…</li></ul></li></ul><h3 id="数据对象"><a class="markdownIt-Anchor" href="#数据对象"></a> 数据对象</h3><ul><li>数据对象是具有相同性质的数据元素的集合，是数据的一个子集</li><li>例如整数数据对象是集合N={0, ±1, ±2…}</li></ul><h3 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h3><ul><li>数据类型是一个值的集合和定义在此集合上的一组操作的总称</li></ul><p><strong>数据类型=值的集合+值集合上的一组操作</strong></p><ol><li>原子类型：其值不可再分的数据类型</li><li>结构类型：其值可以再分解为若干成分(分量)的数据类型</li><li>抽象数据类型 - ADT：抽象数组组织及与之相关的操作</li></ol><ul><li>在使用高级程序设计语言编写程序时，必须对程序中出现的每个变量、常量或表达式，明确说明它们所属的数据类型</li><li>一些基本的数据结构可以用数据类型来实现，如数组、字符串等</li><li>而有一些常用的数据结构，如栈、队列、树、图等，不能直接用数据类型来表示</li></ul><hr><p><strong>抽象数据类型 - Abstract Data Type</strong></p><ul><li><p>抽象数据类型是指一个数学模型以及定义在此数学模型上的一组操作</p><ul><li>抽象数据类型=数据的逻辑结构+抽象运算(运算的功能描述)</li></ul></li><li><p>由用户定义，从问题中抽象出的数据模型(逻辑结构)</p></li><li><p>还包括定义在数据模型上的一组抽象运算(相关操作)</p></li><li><p>不考虑计算机内的具体存储结构与运算的集体实现算法</p></li></ul><p><strong>抽象数据类型的形式定义</strong></p><ul><li>可用(D, S, P)三元组来表示<ul><li>Data - D是数据对象</li><li>Structure - S是D上的关系集</li><li>Procedure - P是对D的基本操作集</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// ADT定义格式</span><br>ADT adt_name &#123;<br>    数据对象: &lt;数据对象的定义&gt;;<br>    数据关系: &lt;数据关系的定义&gt;;<br>    基本操作: &lt;基本操作的定义&gt;;<br>&#125; ADT adt_name;<br><span class="hljs-comment">// 用C语言构造复数</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">float</span> realpart; <span class="hljs-comment">// 实部</span><br>    <span class="hljs-type">float</span> imagpart; <span class="hljs-comment">// 虚部</span><br>&#125; Complex; <span class="hljs-comment">// 定义复数抽象类型</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">assign</span><span class="hljs-params">(Complex *A, <span class="hljs-type">float</span> real, <span class="hljs-type">float</span> imag)</span></span>; <span class="hljs-comment">// 赋值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Complex *A, Complex B, Complex C)</span></span>; <span class="hljs-comment">// 加法</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">assign</span><span class="hljs-params">(Complex *A, <span class="hljs-type">float</span> real, <span class="hljs-type">float</span> imag)</span> </span>&#123;<br>    A-&gt;realpart=real;<br>    A-&gt;imagpart=imag;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Complex *A, Complex B, Complex C)</span> </span>&#123;<br>    A-&gt;realpart=B.realpart+C.realpart;<br>    A-&gt;imagpart=B.imagpart+C.imagpart;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构★</h3><ul><li>数据元素不是不利存在的，它们之间存在着某种关系，数据元素相互之间的关系成为结构</li><li>数据结构是指相互之间存在一种或多种特定关系的数据元素的集合<ul><li>也可以说：数据结构是带结构的数据元素的集合</li></ul></li><li>数据结构包括以下三个方面的内容：<ol><li>逻辑结构：数据元素之间的逻辑关系<ul><li>与数据的存储无关，独立于计算机</li><li>是从具体问题抽象出来的数学模型</li></ul></li><li>存储结构：数据元素及其关系在计算机内存中的表示(映像)<ul><li>也称为物理结构</li></ul></li><li>数据的运算：数据的运算和实现，即对数据元素可以施加的操作以及这些操作在相应的存储结构上的实现</li></ol></li><li>逻辑结构与存储结构的关系：<ul><li>存储结构是逻辑关系的映像与元素本身的映像</li><li>逻辑结构是数据结构的抽象，存储结构是数据结构的实现</li><li>两者综合起来建立了数据元素时间的结构关系</li></ul></li></ul><h4 id="逻辑结构"><a class="markdownIt-Anchor" href="#逻辑结构"></a> 逻辑结构</h4><p><strong>逻辑结构</strong>是指数据元素之间的逻辑关系，即从逻辑关系上描述数据。它与数据的存储无关，是独立于计算机的。数据的逻辑结构分为线性结构和非线性结构，线性表是典型的线性结构；集合、树和图是典型的非线性结构</p><p><img src="/.space//1.svg" srcset="/img/404_GIF.gif" lazyload alt></p><hr><p><strong>划分方法一</strong></p><ul><li><p><strong>线性结构</strong>有且只有一个开始结点和终止结点，并且所有结点最多只有一个直接前驱和一个直接后继。例如：线性表、栈、队列、串</p></li><li><p><strong>非线性结构</strong>中一个结点可能有多个直接前驱和直接后继。例如：树、图</p></li></ul><hr><p><strong>划分方法二</strong></p><ul><li><strong>集合</strong>：结构中的数据元素之间除了同属一个集合的关系外，别无其它关系</li><li><strong>线性结构</strong>：结构中的数据元素之间只存在一对一的关系</li><li><strong>树形结构</strong>：结构中的数据元素之间存在一对多的关系</li><li><strong>图状结构(或网状结构)</strong>：结构中的数据元素之间存在多对多的关系</li></ul><h4 id="存储结构"><a class="markdownIt-Anchor" href="#存储结构"></a> 存储结构</h4><p><strong>存储结构</strong>是指数据结构在计算机中的表示(又称映像)，也称为<strong>物理结构</strong>。它包括数据元素的表示和关系的表示。数据的存储结构是用计算机语言实现的逻辑结构，它依赖于计算机语言。数据的存储结构主要有顺序存储、链式存储、索引存储和散列存储</p><ol><li>若采用顺序存储，则各个数据元素在物理上必须是连续的；若采用非顺序存储，则各个数据元素在物理上可以是离散的</li><li>数据的存储结构会影响存储空间分配的方便程度 - 在线性表的第i个位置插入新的元素</li><li>数据的存储结构会影响数据运算的速度 - 找到线性表中第i个元素</li></ol><p><strong>四种基本的存储结构</strong>：</p><ul><li><strong>顺序存储</strong>：把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中<ul><li>用一组连续的存储单元依次存储数据元素</li><li>数据元素之间的逻辑关系由存储单元的邻接关系来体现</li><li>优点：可以实现随机存储，每个元素占用最少的存储空间</li><li>缺点：只能使用相邻的一整块存储单元，因此可能产生较多的外部碎片<ul><li>外部碎片：指的是还没有被分配出去(不属于任何进程)，但由于太小了无法分配给任何申请内存空间的新进程的内存空闲区域</li></ul></li><li>C语言中可以用数组来实现顺序存储结构<ul><li>例如：(bat, cat, eat, …)</li></ul></li></ul></li></ul><p><img src="/.space//2.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li><strong>链式存储</strong>：借助指示元素存储地址的指针来表示元素之间的逻辑关系<ul><li>用一组任意的存储单元存储数据元素</li><li>不要求逻辑上相邻的元素在物理位置上也相邻</li><li>优点：不会出现碎片现象，能充分利用所有存储单元</li><li>缺点：每个元素因存储指针而占用额外的存储空间，且只能实现顺序存储</li><li>C语言中用指针来实现链式存储结构<ul><li>例如：(bat, cat, eat, … , mat)</li></ul></li></ul></li></ul><p><img src="/.space//3.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li><strong>索引存储</strong>：在存储元素信息的同时，还建立附加的索引表<ul><li>索引表中的每一项称为索引项，索引项的一般形式是(关键字，地址)<ul><li>关键字是能唯一标识一个结点的那些数据项</li></ul></li><li>优点：检索速度快</li><li>缺点：附加的索引表额外占用存储空间；另外，增加和删除数据时也要修改索引表，因而会花费较多的时间</li><li>Dense Index：若每个结点在索引表中都有一个索引项，则该索引表称为稠密索引</li><li>Sparse Index：若一组结点在索引表中只对应一个索引项，则该索引表称为稀疏索引</li></ul></li><li><strong>散列存储</strong>：根据元素的关键字直接计算出该元素的存储地址，又称哈希(Hash)存储<ul><li>优点：检索、增加和删除结点的操作都很快</li><li>缺点：若散列函数不好，则可能出现元素存储单元的冲突，而解决冲突会增加时间和空间的开销</li></ul></li></ul><p><img src="/.space//4.png" srcset="/img/404_GIF.gif" lazyload alt></p><h4 id="数据的运算"><a class="markdownIt-Anchor" href="#数据的运算"></a> 数据的运算</h4><p>施加在数据上的运算包括运算的定义和实现。运算的定义是针对逻辑结构的，指出运算的功能；运算的实现是针对存储结构的，指出运算的具体操作步骤</p><h1 id="算法和算法评价"><a class="markdownIt-Anchor" href="#算法和算法评价"></a> 算法和算法评价</h1><h2 id="算法的基本概念"><a class="markdownIt-Anchor" href="#算法的基本概念"></a> 算法的基本概念</h2><p>算法(Algorithm)是对特定问题求解步骤的一种描述，它是指令的<strong>有限</strong>序列，其中每条指令表示一个或多个操作。简而言之，算法就是解决问题的方法和步骤</p><ul><li>算法的描述<ul><li>自然语言：中文、英文</li><li>流程图：传统流程图、NS流程图</li><li>伪代码：类语言：类C语言</li></ul></li><li>算法与程序<ul><li>算法是解决问题的一种方法或一个过程，考虑如何将输出转换成输出，一个问题可以有多种算法</li><li>程序是用某种程序设计语言对算法的具体实现</li><li><strong>程序=数据结构+算法</strong><ul><li>数据结构通过算法实现操作</li><li>算法根据数据结构设计程序</li></ul></li></ul></li></ul><p>此外，一个算法还具有下列<strong>5个重要特性</strong>：</p><ol><li><strong>有穷性</strong>：一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成<ul><li>算法必须是有穷的，但程序可以是无穷的</li></ul></li><li><strong>确定性</strong>：算法中每条指令都必须有确切的含义，没有二义性。在任何给定条件下，只有唯一的一条执行路径，即对于相同的输入只能得出相同的输出</li><li><strong>可行性</strong>：算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现</li><li><strong>输入</strong>：一个算法有零个或多个输入，这些输入取自于某个特定的对象的集合</li><li><strong>输出</strong>：一个算法有一个或多个输出，这些输出是与输入有着某种特定关系的量</li></ol><p>通常，设计一个“好”的算法应该考虑达到以下目标(算法设计要求)：</p><ol><li><strong>正确性 - Correctness</strong>：算法应能够正确地解决求解问题</li><li><strong>可读性 - Readability</strong>：算法应具有良好的可读性，以帮助人们理解</li><li><strong>健壮性 - Robustness</strong>：输入非法数据时，算法能适当地作出反应或进行处理，而不会产生莫名其妙的输出结果<ul><li>也叫做<strong>鲁棒性</strong></li></ul></li><li><strong>高效性 - Efficiency</strong>：高效率与低存储量需求：效率是指算法执行的时间，存储量需求是指算法执行过程中所需要的最大存储空间，这两者都与问题的规模有关 - 要求花费尽量少的时间和尽量低的存储需求<ul><li>时间复杂度和空间复杂度</li></ul></li></ol><h2 id="算法效率的度量"><a class="markdownIt-Anchor" href="#算法效率的度量"></a> 算法效率的度量★</h2><blockquote><p>算法效率的度量是通过<strong>时间复杂度</strong>和<strong>空间复杂度</strong>来描述的</p><p>时间复杂度和空间复杂度有时候是矛盾的</p></blockquote><h3 id="时间复杂度"><a class="markdownIt-Anchor" href="#时间复杂度"></a> 时间复杂度</h3><blockquote><p><strong>如何评估算法时间开销？</strong></p><ol><li>让算法先运行，事后统计运行时间</li></ol><ul><li>存在的问题：<ul><li>和机器性能有关，如：超级计算机vs单片机</li><li>和编程语言有关，越高级的语言执行效率越低</li><li>和编译程序产生的机器指令的质量有关</li><li>有些算法是不能事后统计的，如：导弹控制算法</li></ul></li><li>方法不适用<ul><li>应排除于算法本身无关的外界因素</li></ul></li></ul><ol start="2"><li></li></ol></blockquote><p>一个语句的频度是指该语句在算法中被重复执行的次数。算法中所有语句的频度之和记为<code>T(n)</code>，它是该算法问题规模n的函数，时间复杂度主要分析<code>T(n)</code>的数量级</p><p>算法中<strong>基本运算</strong>(最深层循环内的语句)的频度与<code>T(n)</code>同数量级，因此通常采用算法中<strong>基本运算</strong>的频度<code>f(n)</code>来分析算法的时间复杂度</p><ul><li>基本运算(基本语句)：<ul><li>算法中重复执行次数和算法的执行时间成正比的语句</li><li>对算法运行时间贡献最大的语句</li><li>执行次数最多的语句</li></ul></li></ul><p>因此，算法的时间复杂度记为<code>T(n)=O(f(n))</code> - 式中O的含义是<code>T(n)</code>的数量级</p><p>其严格的数学意义：若<code>T(n)</code>和<code>f(n)</code>是定义在正整数集合上的两个函数，则存在正常数C和n0，使得当n≥n0时，都满足0≤T(n)≤Cf(n)</p><p>算法的时间复杂度不仅依赖于<strong>问题的规模n</strong>，也取决于待输入<strong>数据性质</strong>(如输入数据元素的初始状态)</p><p>有的情况下，算法中基本操作重复执行的次数还随问题的输入数据集不同而变化</p><p>例如：顺序查找，在数组a[i]中查找值等于e的元素，返回其所在位置</p><ul><li>最坏时间复杂度是指在最坏情况下，算法的时间复杂度</li><li>平均时间复杂度是指所有可能输入实例在等概率出现的情况下，算法的期望运行时间</li><li>最好时间复杂度是指在最好情况下，算法的时间复杂度</li></ul><p><strong>一般总是考虑在最坏情况下的时间复杂度</strong>，以保证算法的运行时间不会比它更长</p><ul><li>加法规则：T(n)=T1(n)+T2(n)=O(f(n))+O(g(n))=O(max(f(n), g(n)))<ul><li>两个或多个程序同时执行时，时间复杂度取决于程序中时间复杂度的最大值</li></ul></li><li>乘法规则：T(n)=T1(n)×T2(n)=O(f(n))×O(g(n))=O(f(n)×g(n))</li><li>常见的渐进时间复杂度排序★<ul><li>O(1)&lt;O(log<sub>2</sub>n)&lt;O(n)&lt;O(nlog<sub>2</sub>n)&lt;O(n<sup>2</sup>)&lt;O(n<sup>3</sup>)&lt;O(2<sup>n</sup>)&lt;O(n!)&lt;O(n<sup>n</sup>)</li></ul></li><li><strong>需要注意的是</strong><ul><li><p>在相同规模n下，时间复杂度小的算法在时间上必然优于时间复杂度大的算法</p></li><li><p>所谓时间复杂度，是指最坏情况下估算算法执行时间的一个上界</p><ul><li>时间复杂度总是考虑最坏情况下的时间复杂度，以保证算法的运行时间不会比它更长</li></ul></li><li><p>同一个算法，实现语言的级别越高，执行效率越低</p></li></ul></li></ul><h3 id="空间复杂度"><a class="markdownIt-Anchor" href="#空间复杂度"></a> 空间复杂度</h3><p>算法的空间复杂度<code>S(n)</code>定义为该算法所耗费的存储空间，是指算法所需存储空间的度量(数量级)，它是问题规模n的函数，记为<code>S(n)=O(g(n))</code></p><p>一个程序在执行时除需要存储空间来存放本身所用的指令、常数、变量和输入数据外，还需要对一些数据进行操作的工作单元和存储一些为实现计算所需信息的辅助空间</p><ul><li>算法要占据的空间：<ul><li>算法本身要占据的空间，输入/输出，指令，常数，变量等</li><li>算法执行时要使用的辅助空间</li></ul></li></ul><p>若输入数据所占空间只取决于问题本身，和算法无关，则只需分析除输入和程序之外的额外空间？</p><p><strong>算法原地工作</strong>是指算法所需的辅助空间为常量，即O(1)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java学习笔记</title>
    <link href="/Post/2022/Java/"/>
    <url>/Post/2022/Java/</url>
    
    <content type="html"><![CDATA[<h1 id="java基础"><a class="markdownIt-Anchor" href="#java基础"></a> Java基础</h1><p><strong>一次编译到处运行</strong></p><ul><li>JDK：Java Development Kit<ul><li>JDK包含JRE，在JRE的基础上给开发人员提供支持</li></ul></li><li>JRE：Java Runtime Environment<ul><li>Java运行时的环境</li></ul></li><li>JVM：Java Virtual Machine<ul><li>Java虚拟机</li></ul></li></ul><h1 id="gui编程"><a class="markdownIt-Anchor" href="#gui编程"></a> <a href="https://gitee.com/CheeseburgerIM/Chai_Code/tree/master/Java/GUI/Study">GUI编程</a></h1><h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><p>Gui的核心技术：Swing &amp; AWT</p><ul><li>Swing：</li><li>AWT：Abstract Window Toolkit - 图形用户界面</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux学习笔记</title>
    <link href="/Post/2022/Linux/"/>
    <url>/Post/2022/Linux/</url>
    
    <content type="html"><![CDATA[<ul><li>创建软链接</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">ln</span> -s [<span class="hljs-built_in">source</span>] [target]</span><br></code></pre></td></tr></table></figure><ul><li>查询运行的Java项目</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">ps -ef|grep java</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">ps -aux|grep java</span><br></code></pre></td></tr></table></figure><ul><li>查询端口号占用情况</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">netstat -anp|grep [port]</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">netstat -anop|grep [process-id]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker学习笔记</title>
    <link href="/Post/2022/Docker/"/>
    <url>/Post/2022/Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1><ul><li>官网：<a href="https://www.docker.com/">https://www.docker.com/</a></li><li>文档：<a href="https://docs.docker.com/">https://docs.docker.com/</a></li><li>DockerHub：<a href="https://hub.docker.com/">https://hub.docker.com/</a></li><li>教程：<a href="https://www.bilibili.com/video/BV1og4y1q7M4">https://www.bilibili.com/video/BV1og4y1q7M4</a></li></ul><ol><li>镜像 - image：docker镜像就好比是一个模板，可以通过这个模板来创建容器服务，通过这个镜像可以创建多个容器(最终服务运行或者项目运行就是在容器中的)</li><li>容器 - container：docker利用容器技术，独立运行一个或者一组通过镜像来创建的应用。基本命令包括启动、停止、删除等操作。可以把容器理解为一个建议的Linux系统</li><li>仓库 - repository：就是存放镜像的地方。分为共有仓库和私有仓库</li></ol><h1 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h1><blockquote><p>环境准备：Linux - CentOS 7</p></blockquote><ol><li>环境查看</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">系统内核</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">uname</span> -r</span><br>3.10.0-1160.45.1.el7.x86_64<br><span class="hljs-meta prompt_"># </span><span class="language-bash">系统版本</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> /etc/os-release</span><br>NAME=&quot;CentOS Linux&quot;<br>VERSION=&quot;7 (Core)&quot;<br>ID=&quot;centos&quot;<br>ID_LIKE=&quot;rhel fedora&quot;<br>VERSION_ID=&quot;7&quot;<br>PRETTY_NAME=&quot;CentOS Linux 7 (Core)&quot;<br>ANSI_COLOR=&quot;0;31&quot;<br>CPE_NAME=&quot;cpe:/o:centos:centos:7&quot;<br>HOME_URL=&quot;https://www.centos.org/&quot;<br>BUG_REPORT_URL=&quot;https://bugs.centos.org/&quot;<br><br>CENTOS_MANTISBT_PROJECT=&quot;CentOS-7&quot;<br>CENTOS_MANTISBT_PROJECT_VERSION=&quot;7&quot;<br>REDHAT_SUPPORT_PRODUCT=&quot;centos&quot;<br>REDHAT_SUPPORT_PRODUCT_VERSION=&quot;7&quot;<br></code></pre></td></tr></table></figure><ol start="2"><li>安装</li></ol><ul><li>查看官方文档：<a href="https://docs.docker.com/desktop/linux/install/">https://docs.docker.com/desktop/linux/install/</a></li><li>腾讯云docker安装教程：<a href="https://cloud.tencent.com/document/product/213/46000">https://cloud.tencent.com/document/product/213/46000</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">yum update</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">yum install epel-release -y</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">yum clean all</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">yum list</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">yum install docker-io -y</span><br></code></pre></td></tr></table></figure><p><img src="/.space//1.png" srcset="/img/404_GIF.gif" lazyload alt></p><ol start="3"><li>运行</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">systemctl start docker</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker info</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker version</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run hello-world</span><br></code></pre></td></tr></table></figure><p><img src="/.space//3.png" srcset="/img/404_GIF.gif" lazyload alt></p><p><img src="/.space//2.png" srcset="/img/404_GIF.gif" lazyload alt></p><h1 id="命令"><a class="markdownIt-Anchor" href="#命令"></a> 命令</h1><blockquote><p>官方文档：<a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p></blockquote><ul><li>帮助</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">显示docker的版本信息</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker version</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示docker的系统信息</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker info</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">帮助命令</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker --<span class="hljs-built_in">help</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker [<span class="hljs-built_in">command</span>] --<span class="hljs-built_in">help</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看日志</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker logs</span><br></code></pre></td></tr></table></figure><ul><li>进程</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">运行docker</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">systemctl start docker</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止docker</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">systemctl stop docker</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启docker</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">systemctl restart docker</span><br></code></pre></td></tr></table></figure><ul><li>镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看所有本地镜像</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker images</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker images -a <span class="hljs-comment"># --all 列出所有镜像</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker images -q <span class="hljs-comment"># --quiet 只显示镜像id</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">搜索镜像</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker search [name]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载镜像</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker pull [name] <span class="hljs-comment"># 默认下载最新版本</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker pull [name]:[tag]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除镜像</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker rmi -f [image-id]</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker rmi -f [image-id] [image-id]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加标签</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker tag [image-id] [tag]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看镜像历史(构建过程)</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">history</span> [image-id]</span><br></code></pre></td></tr></table></figure><ul><li>容器</li></ul><blockquote><p>有镜像才可以创建容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动容器</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run ([parameters]) [image] ([<span class="hljs-built_in">command</span>])</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数说明</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">--name=[name] <span class="hljs-comment"># 容器名称</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">-d <span class="hljs-comment"># 后台启动</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">-it <span class="hljs-comment"># 使用交互方式运行, 进入容器查看内容</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">-p [host]:[container] <span class="hljs-comment"># 指定容器端口</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">-P <span class="hljs-comment"># 随机指定端口</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">-v <span class="hljs-comment"># 数据卷挂载</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">退出容器</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">exit</span> <span class="hljs-comment"># 停止容器并退出</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">Crtl+P+Q <span class="hljs-comment"># 不停止容器并退出</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看容器</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker ps <span class="hljs-comment"># 查看运行的容器</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker ps -a <span class="hljs-comment"># 查看所有运行过的容器</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker ps -n=[number] <span class="hljs-comment"># 查看若干个最近创建的容器</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker ps -q <span class="hljs-comment"># 只显示容器id</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除容器</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">rm</span> [container-id] <span class="hljs-comment"># 删除指定容器(不能删除正在运行的容器)</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">rm</span> -f $(docker ps -aq) <span class="hljs-comment"># 删除所有容器</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动容器</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker start [container-id]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止容器</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker stop [container-id]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启容器</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker restart [container-id]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">强制停止容器</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">kill</span> [container-id]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入正在运行的容器</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">exec</span> -it [container-id] <span class="hljs-comment"># 创建一个新的终端</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker attach [container-id] <span class="hljs-comment"># 正在执行的终端</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">文件拷贝</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">cp</span> [container-id]:[container-path] [host-path] <span class="hljs-comment"># 容器内拷贝到主机上</span></span><br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><ol><li>CentOS</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载centos镜像</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker pull centos</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动并进入容器</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -it centos /bin/bash <span class="hljs-comment"># 这里主机名就是容器id</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">退出容器</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">exit</span></span><br></code></pre></td></tr></table></figure><ol start="2"><li>MySQL</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载mysql镜像</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker pull mysql</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动mysql容器</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d -p 8081:3306 -v /pyz/mysql/conf.d:/etc/mysql/conf.d -v /pyz/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=[password] --name mysqltest mysql</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-d 后台运行</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-p 端口映射 [host]:[container]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-v volume数据卷挂载 [host]:[container]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-e 环境配置，这里配置了mysql的账户密码</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--name 容器命名</span><br></code></pre></td></tr></table></figure><p>需要注意的是，启动docker容器时使用<code>-d</code>参数来实现后台运行，就必须要有一个前台进程。如果docker发现这个容器没有提供服务，就会自动停止该容器</p><h1 id="dockerfile"><a class="markdownIt-Anchor" href="#dockerfile"></a> DockerFile</h1><p>DockerFile是用来构建docker镜像的文件，是一个命令参数脚本</p><ol><li>编写一个DockerFile文件</li><li><code>docker build</code>构建成为一个镜像</li><li><code>docker run</code>运行镜像</li><li><code>docker push</code>发布镜像</li></ol><p>很多官方镜像都是基础包，缺少很多功能，所以我们通常会根据需要搭建自己的镜像</p><ol><li>每个保留关键字(指令)都必须是大写字母</li><li>指令从上到下依次执行</li><li><code>#</code>表示注释</li><li>每一个指令都会创建一个新的镜像层并提交</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 基础镜像</span><br><span class="hljs-keyword">FROM</span><br><span class="hljs-comment"># 作者: 姓名+邮箱</span><br><span class="hljs-keyword">MAINTAINER</span><br><span class="hljs-comment"># 构建镜像时需要执行的命令</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 添加内容</span></span><br><span class="hljs-keyword">ADD</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 镜像的工作目录</span></span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 挂载的目录</span></span><br><span class="hljs-keyword">VOLUME</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 向外暴露端口</span></span><br><span class="hljs-keyword">EXPOSE</span><br><span class="hljs-comment"># 容器启动时会执行的命令</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-comment"># 只有最后一个会生效且可被替代</span></span><br><span class="hljs-comment"># 容器启动时会执行的命令</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> <span class="hljs-comment"># 可以追加命令</span></span><br><span class="hljs-comment"># 当构建一个被继承构建下一级镜像时会执行的命令</span><br><span class="hljs-keyword">ONBUILD</span><br><span class="hljs-comment"># 与ADD类似, 将文件拷贝到镜像中</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 构建的时候设置环境变量</span></span><br><span class="hljs-keyword">ENV</span><br></code></pre></td></tr></table></figure><p>编写完DockerFile文件后使用命令进行构建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker build -f [dockerfile-path] -t [image-name]:[version] .</span><br></code></pre></td></tr></table></figure><hr><blockquote><p>实战测试：创建一个自己的CentOS镜像</p></blockquote><ol><li>编写DockerFile</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> centos<br><span class="hljs-keyword">MAINTAINER</span> CheeseburgerIM&lt;<span class="hljs-number">13051172893</span>@<span class="hljs-number">163</span>.com&gt;<br><br><span class="hljs-keyword">ENV</span> MYPATH /usr/local<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> <span class="hljs-variable">$MYPATH</span></span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yum -y install vim</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yum -y install net-tools</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$MYPATH</span></span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;------- End -------&quot;</span></span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> /bin/bash</span><br></code></pre></td></tr></table></figure><ol start="2"><li>构建镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker build -f myDockerFile -t mycentos:1.0 .</span><br></code></pre></td></tr></table></figure><ol start="3"><li>测试运行</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -it mycentos:1.0</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">pwd</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">ifconfig</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim <span class="hljs-built_in">test</span></span><br></code></pre></td></tr></table></figure><h1 id="dockerhub"><a class="markdownIt-Anchor" href="#dockerhub"></a> <a href="https://hub.docker.com/">DockerHub</a></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">登录</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker login -u [username]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-p [password]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">发布</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker push [author]/[image-name]:[version]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>高等数学01 - 预备知识</title>
    <link href="/Post/Master/Mathematics/GaoShu/GaoShu01/"/>
    <url>/Post/Master/Mathematics/GaoShu/GaoShu01/</url>
    
    <content type="html"><![CDATA[<h1 id="高等数学预备知识"><a class="markdownIt-Anchor" href="#高等数学预备知识"></a> 高等数学预备知识</h1><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>α</mi><mo>+</mo><mi>β</mi><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi><mi>c</mi><mi>o</mi><mi>s</mi><mi>β</mi><mo>+</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi><mi>s</mi><mi>i</mi><mi>n</mi><mi>β</mi><mspace linebreak="newline"></mspace><mi>s</mi><mi>i</mi><mi>n</mi><mn>2</mn><mi>α</mi><mo>=</mo><mn>2</mn><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi><mspace linebreak="newline"></mspace><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>α</mi><mo>−</mo><mi>β</mi><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi><mi>c</mi><mi>o</mi><mi>s</mi><mi>β</mi><mo>−</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi><mi>s</mi><mi>i</mi><mi>n</mi><mi>β</mi><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">sin(\alpha+\beta)=sin\alpha cos\beta+cos\alpha sin\beta\\sin2\alpha=2sin\alpha cos\alpha\\sin(\alpha-\beta)=sin\alpha cos\beta-cos\alpha sin\beta\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span><span class="mspace newline"></span></span></span></span></p><hr><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>α</mi><mo>+</mo><mi>β</mi><mo stretchy="false">)</mo><mo>=</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi><mi>c</mi><mi>o</mi><mi>s</mi><mi>β</mi><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi><mi>s</mi><mi>i</mi><mi>n</mi><mi>β</mi><mspace linebreak="newline"></mspace><mi>c</mi><mi>o</mi><mi>s</mi><mn>2</mn><mi>α</mi><mo>=</mo><mi>c</mi><mi>o</mi><msup><mi>s</mi><mn>2</mn></msup><mi>α</mi><mo>−</mo><mi>s</mi><mi>i</mi><msup><mi>n</mi><mn>2</mn></msup><mi>α</mi><mspace linebreak="newline"></mspace><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>α</mi><mo>−</mo><mi>β</mi><mo stretchy="false">)</mo><mo>=</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi><mi>c</mi><mi>o</mi><mi>s</mi><mi>β</mi><mo>+</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi><mi>s</mi><mi>i</mi><mi>n</mi><mi>β</mi><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">cos(\alpha+\beta)=cos\alpha cos\beta-sin\alpha sin\beta\\cos2\alpha=cos^2\alpha-sin^2\alpha\\cos(\alpha-\beta)=cos\alpha cos\beta+sin\alpha sin\beta\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span><span class="mspace newline"></span></span></span></span></p><hr><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>a</mi><mi>n</mi><mo stretchy="false">(</mo><mi>α</mi><mo>+</mo><mi>β</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>t</mi><mi>a</mi><mi>n</mi><mi>α</mi><mo>+</mo><mi>t</mi><mi>a</mi><mi>n</mi><mi>β</mi></mrow><mrow><mn>1</mn><mo>−</mo><mi>t</mi><mi>a</mi><mi>n</mi><mi>α</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>β</mi></mrow></mfrac><mspace linebreak="newline"></mspace><mi>t</mi><mi>a</mi><mi>n</mi><mn>2</mn><mi>α</mi><mo>=</mo><mfrac><mrow><mn>2</mn><mi>t</mi><mi>a</mi><mi>n</mi><mi>α</mi></mrow><mrow><mn>1</mn><mo>−</mo><mi>t</mi><mi>a</mi><msup><mi>n</mi><mn>2</mn></msup><mi>α</mi></mrow></mfrac><mspace linebreak="newline"></mspace><mi>t</mi><mi>a</mi><mi>n</mi><mo stretchy="false">(</mo><mi>α</mi><mo>−</mo><mi>β</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>t</mi><mi>a</mi><mi>n</mi><mi>α</mi><mo>−</mo><mi>t</mi><mi>a</mi><mi>n</mi><mi>β</mi></mrow><mrow><mn>1</mn><mo>+</mo><mi>t</mi><mi>a</mi><mi>n</mi><mi>α</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>β</mi></mrow></mfrac><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">tan(\alpha+\beta)=\frac{tan\alpha+tan\beta}{1-tan\alpha tan\beta}\\tan2\alpha=\frac{2tan\alpha}{1-tan^2\alpha}\\tan(\alpha-\beta)=\frac{tan\alpha-tan\beta}{1+tan\alpha tan\beta}\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span></span></span></span></p><hr><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">一</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">二</mi><mi mathvariant="normal">次</mi><mi mathvariant="normal">方</mi><mi mathvariant="normal">程</mi><mo>:</mo><mi>y</mi><mo>=</mo><mi>a</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>b</mi><mi>x</mi><mo>+</mo><mi>c</mi><mspace linebreak="newline"></mspace><mi mathvariant="normal">对</mi><mi mathvariant="normal">称</mi><mi mathvariant="normal">轴</mi><mo>:</mo><mi>x</mi><mo>=</mo><mo>−</mo><mfrac><mi>b</mi><mrow><mn>2</mn><mi>a</mi></mrow></mfrac><mspace linebreak="newline"></mspace><mi mathvariant="normal">判</mi><mi mathvariant="normal">别</mi><mi mathvariant="normal">式</mi><mo>:</mo><mi mathvariant="normal">Δ</mi><mo>=</mo><mfrac><mrow><mo>−</mo><mi>b</mi><mo>±</mo><msqrt><mrow><msup><mi>b</mi><mn>2</mn></msup><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi></mrow></msqrt></mrow><mrow><mn>2</mn><mi>a</mi></mrow></mfrac><mspace linebreak="newline"></mspace><mi mathvariant="normal">韦</mi><mi mathvariant="normal">达</mi><mi mathvariant="normal">定</mi><mi mathvariant="normal">理</mi><mo>:</mo><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mo>−</mo><mfrac><mi>b</mi><mi>a</mi></mfrac><mtext> </mtext><msub><mi>x</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mfrac><mi>c</mi><mi>a</mi></mfrac><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">一元二次方程: y=ax^2+bx+c\\对称轴: x=-\frac{b}{2a}\\判别式: \Delta=\frac{-b\pm\sqrt{b^2-4ac}}{2a}\\韦达定理: x_1+x_2=-\frac{b}{a}\ x_1*x_2=\frac{c}{a}\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">二</span><span class="mord cjk_fallback">次</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">程</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">称</span><span class="mord cjk_fallback">轴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord cjk_fallback">判</span><span class="mord cjk_fallback">别</span><span class="mord cjk_fallback">式</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.276389em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.590389em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord cjk_fallback">韦</span><span class="mord cjk_fallback">达</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">理</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span></span></span></span></p><hr><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">等</mi><mi mathvariant="normal">差</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">列</mi><mo>:</mo><msub><mi>S</mi><mi>n</mi></msub><mo>=</mo><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>∗</mo><mi>n</mi></mrow><mn>2</mn></mfrac><mspace linebreak="newline"></mspace><mi mathvariant="normal">等</mi><mi mathvariant="normal">比</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">列</mi><mo stretchy="false">(</mo><mi mathvariant="normal">公</mi><mi mathvariant="normal">比</mi><mi mathvariant="normal">为</mi><mi>q</mi><mo stretchy="false">)</mo><mo>:</mo><msub><mi>S</mi><mi>n</mi></msub><mo>=</mo><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>a</mi><mi>n</mi></msub><mo>=</mo><mfrac><mrow><msub><mi>a</mi><mn>1</mn></msub><mo>∗</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mi>q</mi><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><mrow><mn>1</mn><mo>−</mo><mi>q</mi></mrow></mfrac><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">等差数列: S_n=a_1+a_2+...+a_n=\frac{(a_1+a_n)*n}{2}\\等比数列(公比为q): S_n=a_1+a_2+...a_n=\frac{a_1*(1-q^n)}{1-q}\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord cjk_fallback">等</span><span class="mord cjk_fallback">差</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">列</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">等</span><span class="mord cjk_fallback">比</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">列</span><span class="mopen">(</span><span class="mord cjk_fallback">公</span><span class="mord cjk_fallback">比</span><span class="mord cjk_fallback">为</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.30744em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span></span></span></span></p><hr><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">自</mi><mi mathvariant="normal">然</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">平</mi><mi mathvariant="normal">方</mi><mi mathvariant="normal">和</mi><mo>:</mo><msub><mi>S</mi><mi>n</mi></msub><mo>=</mo><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msup><mi>n</mi><mn>2</mn></msup><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>6</mn></mfrac><mspace linebreak="newline"></mspace><mi mathvariant="normal">自</mi><mi mathvariant="normal">然</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">立</mi><mi mathvariant="normal">方</mi><mi mathvariant="normal">和</mi><mo>:</mo><msub><mi>S</mi><mi>n</mi></msub><mo>=</mo><msup><mn>1</mn><mn>3</mn></msup><mo>+</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msup><mi>n</mi><mn>3</mn></msup><mo>=</mo><mo stretchy="false">(</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>=</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mspace linebreak="newline"></mspace><mi mathvariant="normal">立</mi><mi mathvariant="normal">方</mi><mi mathvariant="normal">和</mi><mo>:</mo><msup><mi>a</mi><mn>3</mn></msup><mo>+</mo><msup><mi>b</mi><mn>3</mn></msup><mo>=</mo><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msup><mi>a</mi><mn>2</mn></msup><mo>−</mo><mi>a</mi><mi>b</mi><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi mathvariant="normal">立</mi><mi mathvariant="normal">方</mi><mi mathvariant="normal">差</mi><mo>:</mo><msup><mi>a</mi><mn>3</mn></msup><mo>+</mo><msup><mi>b</mi><mn>3</mn></msup><mo>=</mo><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><mi>b</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><mi>a</mi><mi>b</mi><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">自然数平方和: S_n=1^2+2^2+...+n^2=\frac{n(n+1)(2n+1)}{6}\\自然数立方和: S_n=1^3+2^3+...+n^3=(\frac{n(n+1)}{2})^2=\frac{1}{4}n^2(n+1)^2\\立方和: a^3+b^3=(a+b)(a^2-ab+b^2)\\立方差: a^3+b^3=(a-b)(a^2+ab+b^2)\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord cjk_fallback">自</span><span class="mord cjk_fallback">然</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">平</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">和</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord cjk_fallback">自</span><span class="mord cjk_fallback">然</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">立</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">和</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord cjk_fallback">立</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">和</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord cjk_fallback">立</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">差</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span></span></span></span></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux服务器安装Open Office</title>
    <link href="/Post/2022/LinuxOpenOffice/"/>
    <url>/Post/2022/LinuxOpenOffice/</url>
    
    <content type="html"><![CDATA[<ol><li>下载软件包</li></ol><p>OpenOffice官网：<a href="https://www.openoffice.org/zh-cn/">https://www.openoffice.org/zh-cn/</a></p><p>选择RPM格式下载</p><p><img src="/.space//1.png" srcset="/img/404_GIF.gif" lazyload alt></p><ol start="2"><li>下载好的文件上传到服务器</li></ol><p>路径可以自定义，然后解压即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ tar -zxvf Apache_OpenOffice_4.1.12_Linux_x86-64_install-rpm_zh-CN.tar.gz<br></code></pre></td></tr></table></figure><p>解压后的文件夹为<code>zh-CN</code></p><p><img src="/.space//2.png" srcset="/img/404_GIF.gif" lazyload alt></p><ol start="3"><li>安装Open Office</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入/zh-CN/RPMS目录</span><br>$ <span class="hljs-built_in">cd</span> /zd-CN/RPMS<br><span class="hljs-comment"># 安装本地rpm</span><br>$ yum localinstall *.rpm<br></code></pre></td></tr></table></figure><p><img src="/.space//3.png" srcset="/img/404_GIF.gif" lazyload alt></p><p>若结果为上图则安装成功</p><p>默认安装路径为<code>/opt/openoffice4</code></p><p><img src="/.space//4.png" srcset="/img/404_GIF.gif" lazyload alt></p><ol start="4"><li>尝试后台启动Open Office服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ /opt/openoffice4/program/soffice -headless -accept=<span class="hljs-string">&quot;socket,host=127.0.0.1,port=8100;urp;&quot;</span> -nofirststartwizard &amp;<br></code></pre></td></tr></table></figure><p><img src="/.space//5.png" srcset="/img/404_GIF.gif" lazyload alt></p><p>图中运行结果为进程号</p><ol start="5"><li>查看是否启动成功</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看进程号</span><br>$ ps -ef|grep openoffice<br></code></pre></td></tr></table></figure><p><img src="/.space//6.png" srcset="/img/404_GIF.gif" lazyload alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查询端口号</span><br>$ netstat -nltp|grep 8100<br></code></pre></td></tr></table></figure><p><img src="/.space//7.png" srcset="/img/404_GIF.gif" lazyload alt></p><ol start="6"><li>本地连接服务器Open Office服务</li></ol><ul><li>将启动命令中的ip地址改为<code>0.0.0.0</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ /opt/openoffice4/program/soffice -headless -accept=<span class="hljs-string">&quot;socket,host=0.0.0.0,port=8100;urp;&quot;</span> -nofirststartwizard &amp;<br></code></pre></td></tr></table></figure><ul><li>打开服务器8100端口</li><li>启动一个Spring Boot项目连接已部署的Open Office服务</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SSH免密连接服务器</title>
    <link href="/Post/2022/VisitServerWithSSH/"/>
    <url>/Post/2022/VisitServerWithSSH/</url>
    
    <content type="html"><![CDATA[<h1 id="本地主机"><a class="markdownIt-Anchor" href="#本地主机"></a> 本地主机</h1><ol><li>如果本地有SSH Key则无需重新生成</li></ol><p>一般密钥存储在<code>~/.ssh/id_rsa.pub</code>文件中</p><ol start="2"><li>若没有SSH Key则重新生成</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">ssh-keygen</span><br></code></pre></td></tr></table></figure><p>生成后可以找到<code>~/.ssh/id_rsa.pub</code>文件，里面即为生成的密钥</p><h1 id="服务器端"><a class="markdownIt-Anchor" href="#服务器端"></a> 服务器端</h1><ol><li>连接远程服务器 - 打开控制台</li><li>创建用来远程连接的用户</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建用户</span><br>$ useradd pan<br><span class="hljs-comment"># 设置密码</span><br>$ passwd pan<br><span class="hljs-comment"># 需要输入两次密码,在Linux下密码不会显示,输入完回车即可</span><br><span class="hljs-comment"># 可能用到的命令</span><br>$ userdel pan <span class="hljs-comment"># 仅删除用户</span><br>$ userdel -r pan <span class="hljs-comment"># 删除用户及其文件夹</span><br></code></pre></td></tr></table></figure><ol start="3"><li>修改权限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换用户</span><br>$ su pan<br><span class="hljs-comment"># 修改用户权限</span><br>$ <span class="hljs-built_in">chmod</span> 740 /etc/sudoers<br>$ vim /etc/sudoers<br></code></pre></td></tr></table></figure><ol start="4"><li>修改<code>sudoers</code>文件如下</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ......</span><br><span class="hljs-comment">## Allow root to run any commands anywhere</span><br>root    ALL=(ALL)   ALL <span class="hljs-comment"># root账户</span><br>pan     ALL=(ALL)   ALL <span class="hljs-comment"># 需要添加的内容</span><br><span class="hljs-comment"># ......</span><br><span class="hljs-comment"># 点击i进行编辑,修改完成后ESC + :wq保存退出</span><br></code></pre></td></tr></table></figure><ol start="5"><li>配置SSH Key</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># root用户下</span><br><span class="hljs-comment"># 改回权限</span><br>$ <span class="hljs-built_in">chmod</span> 400 /etc/sudoers<br><span class="hljs-comment"># 切换用户</span><br>$ su pan<br><span class="hljs-comment"># pan用户下</span><br>$ <span class="hljs-built_in">mkdir</span> ~/.ssh<br>$ vim ~/.ssh/authorized_keys<br><span class="hljs-comment"># 将本地计算机生成的公钥复制到文件中,保存退出</span><br>$ <span class="hljs-built_in">chmod</span> 600 /home/pan/.ssh/authorized_keys<br>$ <span class="hljs-built_in">chmod</span> 700 /home/pan/.ssh<br></code></pre></td></tr></table></figure><h1 id="本地测试"><a class="markdownIt-Anchor" href="#本地测试"></a> 本地测试</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 本地终端测试</span><br><span class="hljs-comment"># 在本地电脑右键&quot;Git Bash Here&quot;</span><br><span class="hljs-comment"># 输入 ssh -v pan@SERVER_IP</span><br><span class="hljs-comment"># 其中SERVER_IP为服务器的IP地址</span><br><span class="hljs-comment"># 若连接成功说明配置正确</span><br></code></pre></td></tr></table></figure><p><img src="/.space//1.png" srcset="/img/404_GIF.gif" lazyload alt></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>软件测试09 - 性能测试和JMeter</title>
    <link href="/Post/JuniorSecondSemester/SoftwareTesting/Chapter/Chapter9/"/>
    <url>/Post/JuniorSecondSemester/SoftwareTesting/Chapter/Chapter9/</url>
    
    <content type="html"><![CDATA[<h1 id="chapter09-performance-test-jmeter"><a class="markdownIt-Anchor" href="#chapter09-performance-test-jmeter"></a> Chapter09 - Performance Test &amp; JMeter</h1><h2 id="性能测试"><a class="markdownIt-Anchor" href="#性能测试"></a> 性能测试</h2><ul><li><p>性能测试是用来确定系统在特定压力下的交互性和稳定性的测试方法</p></li><li><p>性能测试也可以用来调查、度量、确认和验证系统的其他属性，比如扩展性、可靠性和资源使用率</p></li><li><p>从用户角度来说，性能测试可以用来表示整个应用的响应时间</p></li><li><p>性能测试的目标不仅仅是发现系统中的bug，还要解决系统中的性能瓶颈问题</p></li><li><p>做性能测试的原因</p><ul><li>如果上线没有做性能测试的系统可能会导致以下问题<ul><li>多用户并发访问时导致加载缓慢</li><li>实用性差会给名声带来负面影响，还会直接影响预期的销售目标</li></ul></li></ul></li><li><p><strong>负载测试</strong> - Load Testing：性能测试的一种</p><ul><li>不断增加系统负载，直到达到其阈值时所能体现出来的系统性能</li><li>Load Testing也被称为Endurance Testing(耐力测试)和Volume Testing(容量测试)</li><li>负载测试的主要目的是监测在高压情况下系统的响应时间和性能指标</li><li>负载测试是为了找到系统能够承载的压力</li><li>成功的负载测试表示在测试过程中执行特定的测试样例没有出现任何错误</li></ul></li><li><p><strong>压力测试</strong> - Stress Testing：也是性能测试的一种</p><ul><li>压力测试是当硬件资源，例如CPU、内存、磁盘空间等不充足的时候，检查软件的稳定性</li><li>压力测试是为了确认当硬件资源使用超过峰值时应用的行为</li><li>压力测试是一种&quot;负面测试&quot;，同时并发的运行数量高达系统硬件资源无法处理的进程</li></ul></li><li><p><strong>负载测试和压力测试的区别</strong></p><ul><li>负载测试<ul><li>负载测试确定应用程序在典型用户场景的并发用户会话下的性能如何</li><li>Load Testing determines how is the performance of the application under the concurrent user sessions for a typical user scenario</li><li>重点在于负载不断变化，要得到在不同负载下程序的性能指标</li></ul></li><li>压力测试<ul><li>压力测试检查应用程序在最大负荷下的表现。简单地说，就是找到应用程序的上限，低于这个上限它就能正常工作。</li><li>Stress Testing examines how an application behaves under maximum load. In simple terms find the upper threshold for the application below which it can work normally</li><li>重点在于找到最大的甚至超出阈值时承载能力</li></ul></li></ul></li><li><p>压力测试流程图</p></li></ul><p><img src="/.space//1.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>压力测试计划</li></ul><p><img src="/.space//2.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>用户负载估计 - User Load Estimation<ul><li>从市场或商业开发种得到的反馈帮助我们估算使用软件产品的人数</li><li>这会决定负载测试时使用的负载数量</li><li>Example：没有经验的员工可能会模拟1000个用户，但是可能系统的用户基数只有不到400</li></ul></li><li>用户负载分布 - User Load Distribution<ul><li>从市场或商业开发种得到的反馈帮助我们估算使用软件产品的时间分布、功能分布</li><li>这同样会决定负载测试时使用的负载数量</li><li>Example：可能在上午或下午到达峰值，晚上访问量较少；不同的功能的负载标准也不同</li><li>负载测试时也会考虑用户负载分布的因素来配置测试样例</li></ul></li><li>用户活动分析 - User Activity Analysis<ul><li>于市场或商业部门详细讨论，得到用户的活动细节，并根据结论来编写测试脚本</li></ul></li><li>生成测试报告<ul><li>工程部门的详细报告</li><li>管理部门的通用报告<ul><li>包括某场景下特定活动的响应时间</li><li>以及其他的可观测指标</li><li>通过测试得到的结论</li></ul></li></ul></li></ul><h2 id="liux性能分析"><a class="markdownIt-Anchor" href="#liux性能分析"></a> Liux性能分析</h2><ul><li>CPU</li><li>Memory</li><li>IO</li><li>Network</li></ul><h2 id="jmeter"><a class="markdownIt-Anchor" href="#jmeter"></a> <a href="https://cheeseburgerim.gitee.io/chai_post/JuniorSecondSemester/SoftwareTesting/Experiment/Experiment6.html">JMeter</a></h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>软件测试08 - 测试自动化和Selenium</title>
    <link href="/Post/JuniorSecondSemester/SoftwareTesting/Chapter/Chapter8/"/>
    <url>/Post/JuniorSecondSemester/SoftwareTesting/Chapter/Chapter8/</url>
    
    <content type="html"><![CDATA[<h1 id="chapter08-test-automation-selenium"><a class="markdownIt-Anchor" href="#chapter08-test-automation-selenium"></a> Chapter08 - Test Automation &amp; Selenium</h1><h2 id="测试自动化"><a class="markdownIt-Anchor" href="#测试自动化"></a> 测试自动化</h2><ul><li>软件测试是耗时耗力的</li><li>软件测试占据了高达50%的开发时间，对于安全要求高的引用会占用更多</li><li>Security &amp; Safety<ul><li>Security - 安保：对内部的安全</li><li>Safety - 安全：对其他的安全</li></ul></li><li>测试自动化意味着使用软件在待测程序上进行重复性的测试</li><li>测试自动化的优势<ul><li>可以频繁的进行回归测试<ul><li><strong>回归测试</strong>是指修改了旧代码后，重新进行测试以确认修改没有引入新的错误或导致其他代码产生错误</li><li>自动回归测试将大幅降低系统测试、维护升级等阶段的成本</li></ul></li><li>开发人员可以及时得到反馈</li><li>测试样例几乎无限制的迭代</li><li>对于敏捷开发和极限编程都有支持的方法论</li><li>测试样例的规范文档</li><li>定制缺陷报告</li><li>发现手动测试发现不了的错误</li></ul></li><li>自动化测试的基本流程</li></ul><p><img src="/.space//1.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>UI自动化测试<ul><li>和手动测试相似，但是并不是重复性的点击程序然后确认结果</li><li>而是通过一些工具，将操作记录下来，重复性执行</li><li>关键步骤<ul><li>录制 - Record：录制需要测试的操作</li><li>回访Replay：回放所录制的操作来进行自动化测试</li><li>比较和分析运行结果</li></ul></li></ul></li><li>自动化测试的适用项目<ul><li>软件需求变动不频繁</li><li>项目周期较长</li><li>测试脚本可重复使用<ul><li>兼容性测试</li></ul></li></ul></li></ul><h2 id="selenium"><a class="markdownIt-Anchor" href="#selenium"></a> <a href="https://cheeseburgerim.gitee.io/chai_post/JuniorSecondSemester/SoftwareTesting/Experiment/Experiment5.html">Selenium</a></h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>软件测试07 - 黑盒测试</title>
    <link href="/Post/JuniorSecondSemester/SoftwareTesting/Chapter/Chapter7/"/>
    <url>/Post/JuniorSecondSemester/SoftwareTesting/Chapter/Chapter7/</url>
    
    <content type="html"><![CDATA[<h1 id="chapter07-blackbox-testing"><a class="markdownIt-Anchor" href="#chapter07-blackbox-testing"></a> Chapter07 - BlackBox Testing</h1><blockquote><p>黑盒测试与白盒测试两者最大的不同就是测试时的关注对象不一样。</p><p>黑盒测试主要针对的是把程序展现给用户的功能，而白盒测试则是主要针对程序的代码逻辑。前者测试最终功能，而后者测试后台程序。</p></blockquote><h2 id="黑盒测试"><a class="markdownIt-Anchor" href="#黑盒测试"></a> 黑盒测试</h2><ul><li>基于需求测试软件系统，而忽视具体的实现细节</li><li>这样的软件工件可以是<ul><li>一个方法</li><li>一个类</li><li>一个子系统</li><li>整个系统</li></ul></li><li>如果覆盖了程序中具有代表性的选择，就可以说测试的充分的</li><li>测试主要关注<ul><li>Specification-Based 功能错误</li><li>Specification-Based 组件或系统的行为错误</li><li>Specification-Based 性能错误</li><li>用户使用错误</li><li>黑盒接口错误</li></ul></li></ul><p><img src="/.space//1.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>单输入参数<ul><li>覆盖每一种单个参数组成的代表性选择，观察输出是否与预期相同</li></ul></li><li>多输入参数<ul><li>覆盖每一种由多个参数组成的代表性选择，观察输出是否与预期相同</li></ul></li><li>测试形式的选择<ul><li>当输入值涉及到多个元素，选择单输入参数还是多输入参数？</li><li>单输入参数<ul><li>如果参数以相同的方式独立工作或独立影响输出结果<ul><li>输入一个授权写权限的用户列表</li></ul></li><li>参数的顺序影响输出结果<ul><li>输入一个需要排序的数组</li></ul></li><li>元素之间关系密切 - 紧耦合的<ul><li>坐标(x, y)</li></ul></li></ul></li><li>多输入参数<ul><li>元素之间是松耦合的<ul><li>用户姓名+服务器地址</li></ul></li></ul></li></ul></li></ul><h2 id="单输入参数"><a class="markdownIt-Anchor" href="#单输入参数"></a> 单输入参数</h2><h3 id="等价类划分-ecp"><a class="markdownIt-Anchor" href="#等价类划分-ecp"></a> 等价类划分 - ECP</h3><ul><li><strong>等价类划分</strong> - ECP：Equivalence Class Partitioning<ul><li>将参数的输入域划分成不同的等价类</li><li>充分标准：覆盖每一个划分出来的等价类</li><li>将集合A划分为n个<strong>无交集</strong>的子集ai，使得a1∪a2∪…∪an=A(<strong>完备性</strong> - Completeness)<ul><li>在每一个子集选择一个有代表性的值来代替整个子集</li></ul></li></ul></li></ul><p><img src="/.space//2.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>如何找等价类？</li><li>从需求当中获取<ul><li>对于取值范围[a, b]<ul><li>在[a, b]中：一个有效等价类</li><li>在(b, +∞)：一个无效等价类</li><li>在(-∞, a)：另一个无效等价类</li></ul></li><li>有效等价类满足一些条件</li><li>同时无效等价类违反一些条件</li></ul></li><li>附加的等价类<ul><li>有些要求没有在需求中提到，但是仍然需要进行测试</li><li>Empty：空字符串、空集、空列表</li><li>Null：空指针</li><li>Very Long：超出数据类型取值范围，数组越界</li><li>特殊值：Feb 29th</li></ul></li><li>设计测试样例的步骤<ol><li>划分等价类</li><li>建立表格，给出所有等价类</li><li>每一个等价类有唯一标识</li><li>给每一个尚未覆盖的有效等价类设计一个测试样例 - 重复此步骤知道覆盖所有有效等价类</li><li>给每一个尚未覆盖的无效等价类设计一个测试样例 - 重复此步骤知道覆盖所有无效等价类</li></ol></li></ul><p><img src="/.space//12.png" srcset="/img/404_GIF.gif" lazyload alt></p><p><img src="/.space//13.png" srcset="/img/404_GIF.gif" lazyload alt></p><h3 id="边界值分析-bva"><a class="markdownIt-Anchor" href="#边界值分析-bva"></a> 边界值分析 - BVA</h3><ul><li><strong>边界值分析</strong> - BVA：Boundary Value Analysis<ul><li>分析每一个等价类的边界值</li><li>充分标准：覆盖每一个边界值</li></ul></li><li>动机：有很多错误都是在等价类的边界发生的</li><li>边界值分析是对等价类划分的扩展和优化</li><li>对于每一个等价类<ul><li>测试边界值</li><li>测试在边界值的基础上+(or -)一个最小单位</li></ul></li><li>BVA的实测样例是对ECP样例的补充</li><li>设计测试样例的步骤<ul><li>对于[X, Y]区间内的参数，需要对4个值进行测试<ul><li>有效：X、Y</li><li>无效：X-min_unit、Y+min_unit</li></ul></li><li>对于(X, Y)区间内的参数，同样需要对4个值进行测试<ul><li>无效：X、Y</li><li>有效：X+min_unit、Y-min_unit</li></ul></li><li>如果参数在一个列表中<ul><li>有效：min、max</li><li>无效：min-min_unit、max+min_unit</li></ul></li><li>如果参数是一个数据结构<ul><li>测试样例应该覆盖数据结构指定的边界</li><li>数组：空数组、1个元素的数组，满数组</li><li>集合：空集、1个元素的集合</li></ul></li></ul></li><li>边界值分析对于没有意义的边界是无效的<ul><li>颜色：{Red, Green, Yellow}</li></ul></li></ul><h3 id="ecp和bva的问题"><a class="markdownIt-Anchor" href="#ecp和bva的问题"></a> ECP和BVA的问题</h3><ul><li>等价类划分(ECP)帮助我们将程序的输入域根据程序处理的方法划分成不同的等价类，但是我们怎么知道程序是如何处理这些值的呢？</li><li>当输入受限于复杂的条件甚至条件的组合，我们应该如何设计等价类呢？</li><li>通过程序对不同输入值的反馈来帮助我们划分等价类<ul><li>通过阅读程序需求来建立输入与输出之间的关系</li></ul></li></ul><h2 id="多输入参数"><a class="markdownIt-Anchor" href="#多输入参数"></a> 多输入参数</h2><ul><li>因果图 - Cause-Effect Graph</li><li>决策表 - Decision Table<ul><li>分析输入输出之间的因果关系(图中的边)</li><li>充分标准：覆盖每一条边</li></ul></li><li>Pairwise</li></ul><h3 id="决策表-decision-table"><a class="markdownIt-Anchor" href="#决策表-decision-table"></a> 决策表 - Decision Table</h3><ul><li>决策表 - 判定表</li><li>对于所有功能性测试方法来说，基于判定表是非常严格的，因为判定表本身就是逻辑严谨的</li><li>它们是描述在不同的条件下采取大量行动组合的情况的理想选择？<ul><li>They are ideal for describing situations in which a lot of combinations of actions are taken under varying sets of conditions？</li></ul></li><li>判定表的组成部分<ul><li>显式 - Stub在左，Entry在右；条件在上，动作在下<ul><li>Condition Stub</li><li>Action Stub</li><li>Condition Entry</li><li>Action Entry</li></ul></li><li>隐式<ul><li>表明在给出条件下应该采取什么行动的规则<ul><li>Rules indicate which actions are taken for the conditional circumstances indicated in the condition portion of the rule？</li></ul></li></ul></li></ul></li><li>构建决策表的步骤<ol><li>确定规则数量：如果有n个条件，则<strong>最多</strong>有2的n次方个规则，即每个条件有T和F两种情况</li><li>列出所有条件(condition)和动作(action)</li><li>输入条件条目</li><li>输入动作条目，得到初始决策表</li><li>简化决策表<ul><li>如果有两个规则采取了相同的行动，并且条件也非常相似，可以将两个规则合并</li><li>不关心条目有两种主要解释：条件是不相关的，或条件不适用？<ul><li>Don’t Care entry has two major interpretations：the condition is irrelevant, or the condition does not apply？</li></ul></li></ul></li></ol></li></ul><p><img src="/.space//3.png" srcset="/img/404_GIF.gif" lazyload alt></p><h3 id="因果图-ceg"><a class="markdownIt-Anchor" href="#因果图-ceg"></a> 因果图 - CEG</h3><ul><li>因果图 - CEG：Cause-Effect Graph</li><li>因果图是程序输入(因)和输出(果)之间依赖关系的模型<ul><li>Cause是需求中任意可能会影响程序输出结果的条件</li><li>Effect是输入条件或条件的组合后程序的输出结果</li></ul></li></ul><p><img src="/.space//4.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>黄框是因即输入</li><li>红框是果即输出</li><li>绿框为程序的约束</li><li>因果图关注程序需求中所有的因果关系，然后将CEG转化为决策表，设计测试样例</li><li>因果图会考虑到输入的所有组合以及输出的约束关系</li></ul><p><img src="/.space//5.png" srcset="/img/404_GIF.gif" lazyload alt></p><p><img src="/.space//6.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>CEG种的约束<ul><li>在实际问题中，输入之间也可能存在某种依赖关系，这种依赖关系被称为约束</li><li>同样输出之间也会有约束</li><li>在因果图中，使用一些特殊的符号来表示这种约束关系</li></ul></li></ul><p><img src="/.space//7.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>互斥 - Exclude：不能同时为1</li><li>包含 - Include：至少有一个1</li><li>唯一 - Only：有且仅有一个1</li><li>强制 - Must：若a=1则必须有b=0</li><li>要求 - Require：若a=1则必须有b=1</li></ul><blockquote><p>上图强制和要求的字母写反了</p></blockquote><ul><li>中国象棋中马的走法</li></ul><p><img src="/.space//8.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>原因 - Cause</li></ul><p><img src="/.space//9.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>结果 - Effect</li></ul><p><img src="/.space//10.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>因果图</li></ul><p><img src="/.space//11.png" srcset="/img/404_GIF.gif" lazyload alt></p><h3 id="多因素组合测试-pairwise"><a class="markdownIt-Anchor" href="#多因素组合测试-pairwise"></a> 多因素组合测试 - Pairwise</h3><ul><li>判定表和因果图，每个条件是T和F两个取值<ul><li>N个条件：共有2的N次方种组合</li></ul></li><li>如果每个条件不仅有2个取值，而是多个，怎么办？</li><li>测试工作的目的<ul><li>最大限度的发现系统中存在的问题，即我们一般所称的bug</li><li>测试管理所要解决的问题<ul><li>测试覆盖率</li><li>测试效率</li><li>测试工作量</li></ul></li></ul></li><li>在不可能对所有测试产品功能点进行覆盖、遍历的情况下，如何用最少的工作量发现最多的缺陷，即测试性价比问题<ul><li>绝大部分缺陷是在两个变量取值冲突的测试被发现的</li><li>所以测试所有的&quot;两两组合(Pairwise)&quot;就能基本满足质量要求</li></ul></li><li>如何实现两两组合？<ul><li>假设有A、B、C三个条件</li><li>分别取A1, A2 - B1, B2 - C1, C2, C3</li><li>假设已经存在的测试如下</li></ul></li></ul><table><thead><tr><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>A1</td><td>B1</td><td>C1</td></tr><tr><td>A1</td><td>B2</td><td>C2</td></tr><tr><td>A2</td><td>B1</td><td>C3</td></tr><tr><td>A2</td><td>B2</td><td>C1</td></tr></tbody></table><ul><li>可以发现上面的测试样例并不能满足Pairwise的要求</li><li>所以还需要补充一下两个测试样例</li></ul><table><thead><tr><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>A1</td><td>B2</td><td>C3</td></tr><tr><td>A2</td><td>B1</td><td>C2</td></tr></tbody></table><ul><li>Pairwise可以极大程度降低测试工作量</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>软件测试06 - 逻辑覆盖</title>
    <link href="/Post/JuniorSecondSemester/SoftwareTesting/Chapter/Chapter6/"/>
    <url>/Post/JuniorSecondSemester/SoftwareTesting/Chapter/Chapter6/</url>
    
    <content type="html"><![CDATA[<h1 id="chapter06-logic-coverage"><a class="markdownIt-Anchor" href="#chapter06-logic-coverage"></a> Chapter06 - Logic Coverage</h1><ul><li>Decision Coverage(i.e. Branch Coverage) 判定覆盖(分支覆盖)<ul><li>Decision：分支表达式整体的真值</li><li>if / while / for</li><li>判定覆盖需要包括判定语句所有真值情况<ul><li>True</li><li>False</li></ul></li></ul></li><li>Condition Coverage：条件覆盖<ul><li>条件覆盖需要包括每一个条件的所有真值情况<ul><li>True</li><li>False</li></ul></li><li>Condition：不包括布尔运算符(||, &amp;&amp;, !)的布尔表达式</li><li>例如：a&gt;b</li><li>可以理解为一个简单子句</li><li>如果在分支表达式中出现多次相同的条件，要把它们看作不同的条件</li></ul></li><li>Condition/Decision Coverage(C/D)：条件判定覆盖<ul><li>每个条件要取到T和F</li><li>对于整个判定也要取到T和F</li><li>C/DC§=CC§∩DC§</li></ul></li><li>Multiple-Condition Coverage：条件组合覆盖<ul><li>如果有k个非耦合的条件，共有2的k次方种组合</li><li>耦合：<code>x&gt;0&amp;&amp;x&gt;0</code></li><li>与全路径覆盖相似，这种覆盖方法是不可行的</li></ul></li><li>Modified Condition/Decision Coverage(MC/DC)：改进的条件判定覆盖<ul><li>覆盖多条件组合的所有情况的代价非常大，尤其是当条件数量多的时候</li><li><strong>MC/DC覆盖是用来测试条件组合种每一个单独的条件是否对整体判定表达式的结果有独立影响</strong></li><li>因此MC/DC覆盖是比条件组合覆盖较弱的覆盖准则，但同时也降低了测试的成本，让测试变得可行</li></ul></li></ul><p><img src="/.space//1.png" srcset="/img/404_GIF.gif" lazyload alt></p><p><strong>MC/DC覆盖总结</strong></p><p>程序P的测试集T需要满足测试需求R，MC/DC覆盖准则下的T是充分的，当且仅当执行T中每一个测试样例，满足如下条件</p><ol><li>P中每一个代码块都被覆盖了</li><li>每一个条件都取到了T和F</li><li>每一个判定表达式也都取到了T和F</li><li>条件组合中的每一个条件都被证明可以独立影响判定表达式的结果</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>软件测试05 - 图覆盖</title>
    <link href="/Post/JuniorSecondSemester/SoftwareTesting/Chapter/Chapter5/"/>
    <url>/Post/JuniorSecondSemester/SoftwareTesting/Chapter/Chapter5/</url>
    
    <content type="html"><![CDATA[<h1 id="chapter05-graph-coverage"><a class="markdownIt-Anchor" href="#chapter05-graph-coverage"></a> Chapter05 - Graph Coverage</h1><h2 id="图覆盖"><a class="markdownIt-Anchor" href="#图覆盖"></a> 图覆盖</h2><ul><li>图是测试中最常用的一种结构</li><li>图可以来自<ul><li>控制流图</li><li>设计图</li><li>有限状态机</li><li>状态图</li><li>用例图</li><li>…</li></ul></li><li>测试旨在以某些方式覆盖图</li><li>图的组成部分<ul><li>节点N<ul><li>N0为初始节点；Nf为终止节点</li></ul></li><li>边E<ul><li>(ni, nj)为以i节点开始j节点结束的边</li></ul></li></ul></li><li>图中的路径<ul><li>路径Path：节点的序列<ul><li>一对节点构成一条边</li></ul></li><li>长度Length：边的个数<ul><li>由1个节点组成的路径的长度为0</li></ul></li><li>子路径Subpath：由节点子序列构成的路径是原路径的子路径</li><li>到达Reach(n)：可以由n到达的子图<ul><li>n可以为一个节点，多个节点，边</li></ul></li></ul></li></ul><p><img src="/.space//1.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>测试路径 - Test Path：从初始节点开始，到终止节点结束的路径<ul><li>测试路径代表测试样例的执行</li><li>一些测试路径可以被多个测试样例执行</li><li>一些测试路径不能被测试样例执行</li></ul></li><li>单入单出图 - SESE graph：每个测试路径都从一个初始节点开始，从同一个终止节点结束<ul><li>Single Entry Single Exit</li></ul></li></ul><p><img src="/.space//2.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>访问和游历<ul><li>访问 - Visit<ul><li>测试路径p访问节点n&lt;=&gt;n为组成p的节点</li><li>测试路径p访问边e&lt;=&gt;e为组成p的边</li></ul></li><li>游历 - Tour<ul><li>测试路径p游历路径q&lt;=&gt;q为p的子路径</li></ul></li></ul></li></ul><p><img src="/.space//3.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>测试和测试路径<ul><li>path(t)：被测试样例t执行的测试路径</li><li>path(T)：被测试集中测试样例执行的的测试路径的集合</li></ul></li><li>每个测试样例有且仅有一个测试路径</li><li>图中两个位置是否可到达<ul><li>语法到达 - Syntactic Reach：两个位置之间存在图的一个子路径</li><li>语义到达 - Semantic Reach：存在测试样例执行时可从第一个位置到达第二个位置</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">isReach</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>&gt;<span class="hljs-number">5</span>&amp;&amp;<span class="hljs-number">2</span>&lt;<span class="hljs-number">5</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;Reach&quot;</span>);<br>        <span class="hljs-comment">// 语法上可以到达</span><br>        <span class="hljs-comment">// 语义上不可到达</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试和图覆盖<ol><li>将软件抽象生成一个图</li><li>获取能够访问或游历特定的节点集、边集以及子路径</li></ol></li><li>结构覆盖准则 - Structural Coverage Criteria<ul><li>Defined on a graph just in terms of nodes and edges？</li></ul></li><li>数据流覆盖准则 - Data Flow Coverage Criteria<ul><li>Requires a graph to be annotated with references to variables？</li></ul></li></ul><h2 id="结构覆盖-structural-coverage"><a class="markdownIt-Anchor" href="#结构覆盖-structural-coverage"></a> 结构覆盖 - Structural Coverage</h2><ul><li>节点覆盖 - NC(Node Coverage)：Every Node<ul><li>测试集T满足图G的节点覆盖&lt;=&gt;对于每一个语法上可到达的节点n，都存在一个样例t，其对应的测试路径包含n节点(该路径能够访问节点n)</li><li>测试需求包括每一个可到达的节点</li></ul></li><li>边覆盖 - EC(Edge Coverage)：Every Edge of Length up to 1<ul><li>便覆盖要比节点覆盖要求严格一些</li><li>测试需求必须包括每一个可到达的长度&lt;=1的边<ul><li>长度=1：边由两个节点构成</li><li>长度=0：边为一个节点，就变成了节点覆盖</li></ul></li></ul></li><li>节点覆盖和边覆盖不同，当且仅当在一对节点间既有边又有路径，例如<code>if-else</code>语句</li></ul><p><img src="/.space//4.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>边对覆盖 - EPC(Edge Pair Coverage)：Every Path of Length up to 2<ul><li>测试需求必须包括每一个可到达的长度&lt;=2的路径</li></ul></li><li>全路径覆盖 - CPC：Complete Path Coverage<ul><li>测试需求包括图中所有路径</li><li>但是这是不现实的，尤其是当图中有环的时候</li></ul></li><li>特定路径覆盖 - SPC：Specified Path Coverage<ul><li>测试需求必须包括指定的路径集合</li></ul></li></ul><p><img src="/.space//5.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>简单路径 - Simple Path：从ni节点开始到nj节点结束的路径，且路径中的节点没有重复出现，除非ni与nj相同<ul><li>循环是一个简单路径</li></ul></li><li>主路径 - Prime Path Coverage：不是任何一个其他简单路径的子路径的简单路径<ul><li>可以理解为最长的简单路径</li><li>不唯一</li></ul></li></ul><p><img src="/.space//6.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>主路径覆盖 - PPC：Prime Path Coverage<ul><li>一个简单且优雅的包括循环的有限覆盖准则<ul><li>包括不执行循环，执行一次循环，执行多次循环</li></ul></li><li>测试需求必须包含图中每一个主路径</li></ul></li><li>主路径覆盖包含边覆盖和节点覆盖，不一定包含边对覆盖</li></ul><p><img src="/.space//7.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>寻找主路径的步骤<ul><li>从长度为0开始</li><li>一直寻找到不能再扩展为止</li></ul></li></ul><p><img src="/.space//8.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>其中<code>!</code>表示不能再扩展的路径</li><li>其中<code>*</code>表示形成循环的路径</li></ul><h2 id="数据流覆盖-data-flow-coverage-criteria"><a class="markdownIt-Anchor" href="#数据流覆盖-data-flow-coverage-criteria"></a> 数据流覆盖 - Data Flow Coverage Criteria</h2><ul><li>数据流覆盖<ul><li>目标：确保程序中的值被正确的计算和使用</li></ul></li><li>Definition - 定义：变量的值被存储到内存中的位置</li><li>Use - 使用：变量的值被访问的位置</li></ul><p><img src="/.space//9.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>def(n) or def(e)：定义的位置可以在节点上也可以在边上</li><li>use(n) or use(e)：使用的位置可以在节点上也可以在边上</li><li>DU Pair - (li, lj)：表示变量v在li位置定义，在lj位置使用</li><li>Def-Clear：在li和lj之间没有对变量v赋予其他的值，则称为定义清晰</li><li>Reach：如果在li和lj之间存在一个关于变量v的定义清晰的路径，则说明在li定义变量v可达在lj使用变量v？</li><li>DU-Path：关于变量v，从定义到使用的路径<ul><li>du(ni, nj. v)：对于变量v，从节点ni到nj的du-path的集合</li><li>du(ni, v)：对于变量v，以ni为起始节点的du-path的集合</li></ul></li><li>数据流覆盖准则<ul><li>每一个变量的定义</li><li>每一个变量的使用</li><li>每一个du-path</li></ul></li><li>全定义覆盖 - ADC：All-Defs Coverage<ul><li>确保每一个定义的变量都会被使用</li><li>对每一个变量来说，测试需求必须覆盖至少一个du(n, v)</li></ul></li><li>全使用覆盖 - AUC：All-Uses Coverage<ul><li>确保测试到变量的每一次使用</li><li>对每一个变量来说，测试需求必须覆盖至少一个du(ni, nj, v)</li></ul></li><li>全DU路径覆盖 - ADUPC：All-DU-Paths Coverage<ul><li>确保测试到每个变量的所有使用方法</li><li>测试需求必须覆盖每一个变量的全部du(ni, nj, v)</li></ul></li></ul><p><img src="/.space//10.png" srcset="/img/404_GIF.gif" lazyload alt></p><h2 id="图覆盖准则包含关系"><a class="markdownIt-Anchor" href="#图覆盖准则包含关系"></a> 图覆盖准则包含关系</h2><p><img src="/.space//11.png" srcset="/img/404_GIF.gif" lazyload alt></p><h2 id="控制流图"><a class="markdownIt-Anchor" href="#控制流图"></a> 控制流图</h2><blockquote><p>代码中的代码逻辑和分支作为代码结构呈现在控制流图中</p></blockquote><ul><li>CFG - Control Flow Graph</li><li>控制流图通过描述控制结构给程序的执行进行建模</li><li>控制流图中的元素<ul><li>节点 - Node：若干条语句或基础块</li><li>边 - Edge：控制转换，程序分支</li><li>基础块 - Basic Block：如果块中第一条语句执行，则一定会执行块中所有语句，没有分支</li></ul></li><li>CFG中有时会包含一些额外的信息<ul><li>分支预测？</li><li>定义</li><li>使用</li></ul></li><li>将程序转化为控制流图的关键在于找到程序中的分支</li><li>分支包括<ul><li>if-else</li><li>switch</li><li>while</li><li>for</li></ul></li></ul><p><img src="/.space//12.png" srcset="/img/404_GIF.gif" lazyload alt></p><p><img src="/.space//13.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>对于循环结构来说<ul><li>画图时需要添加额外的节点</li><li>该节点并不代表语句或基础块</li><li>该节点用来辅助我们画控制流图</li><li>称该节点为伪节点 - Dummy Node</li></ul></li></ul><p><img src="/.space//14.png" srcset="/img/404_GIF.gif" lazyload alt></p><p><img src="/.space//15.png" srcset="/img/404_GIF.gif" lazyload alt></p><p><img src="/.space//16.png" srcset="/img/404_GIF.gif" lazyload alt></p><hr><blockquote><p>除上述结构信息外，代码中还包括变量信息，这就涉及到如何将变量信息转化为数据流呈现在控制流图上</p></blockquote><ul><li>定义 - def：把值存储在内存中的位置<ul><li>x出现在赋值语句左边</li><li>x作为函数调用的实参或形参</li><li>x作为程序的输入</li></ul></li><li>使用 - use：访问变量的值的位置<ul><li>x出现在赋值语句右边</li><li>条件判断</li><li>程序输出</li></ul></li><li>如果定义和使用出现在同一个节点上且是定义清晰的，当使用在前，定义在后，一般是发生在循环节点当中，把这种定义与使用成为DU-Pair</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Example</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++) &#123;<br>    System.out.println(arr[i]);<br>    <span class="hljs-comment">// 这里arr[i]即为先使用后定义的DU-Pair</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><ul><li>将图覆盖测试准则实施在控制流图上是相对直接的<ul><li>大多数开发性调查工作都是通过控制流图完成的</li></ul></li><li>将程序转化为控制流图需要一些精细的决策</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>软件测试04 - 变异测试</title>
    <link href="/Post/JuniorSecondSemester/SoftwareTesting/Chapter/Chapter4/"/>
    <url>/Post/JuniorSecondSemester/SoftwareTesting/Chapter/Chapter4/</url>
    
    <content type="html"><![CDATA[<h1 id="chapter04-mutation-testing"><a class="markdownIt-Anchor" href="#chapter04-mutation-testing"></a> Chapter04 - Mutation Testing</h1><h2 id="测试充分性-test-adequacy"><a class="markdownIt-Anchor" href="#测试充分性-test-adequacy"></a> 测试充分性 - Test Adequacy</h2><ul><li>有程序P满足了一组功能性需求R，我们把这样的P和R记为(Notate as)(P, R)。其中R包括n个需求R1, R2, …, Rn</li><li>假设存在一个包含k个测试样例的测试集合T，被用于测试程序P来判断该程序是否满足R中的所有需求。并且这里P通过了每一个测试样例，得到了正确的结果</li><li>我们能不能说<ul><li>T已经足够好了？</li><li>P已经得到了充分的测试？</li><li>T已经足够了？</li></ul></li><li>所以说明不能仅通过覆盖率来判断测试样例的好坏，也不能判断程序的优劣</li></ul><h2 id="变异测试-mutation-testing"><a class="markdownIt-Anchor" href="#变异测试-mutation-testing"></a> 变异测试 - Mutation Testing</h2><ul><li>如果程序P通过了测试集T中的所有测试样例，还需要进行变异测试</li><li>变异测试<ul><li>目前阶段最有效的指标，用来衡量测试的充分性</li><li>如果在变异测试的指标下程序达到了很好的程度，我们通常认为使用的测试集合较为充分</li><li>变异测试可以理解为在程序中提前插入错误，看所采用的测试集能否找到插入前后的区别</li></ul></li><li>将P通过变异算子得到P’</li></ul><p><img src="/.space//1.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>P’被称作P的一个变异体</li><li>如果测试集T中的某一个测试样例t，可以区分P和P’，那么可以说：t杀死了P’<ul><li>即P(t)≠P’(t)，测试样例t在P的执行结果与P’不同</li></ul></li><li>如果测试集T中找不到一个t，使其可以区分P和P’，那么可以说：t在测试中存活下来</li><li>如果在整个输入域中都找不到可以区分P和P’的输入值，那么可以说：P和P’是等价的<ul><li>P’可被称为等价变异体</li></ul></li><li>如果P和P’不等价，但是测试集无法区分，那么可以说：所采用的测试集T是不充分的</li><li>非等价且存活的变异体可以指导测试人员生成新的测试样例，使测试集更加充分</li></ul><h3 id="变异测试具体步骤"><a class="markdownIt-Anchor" href="#变异测试具体步骤"></a> 变异测试具体步骤</h3><p><img src="/.space//2.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>步骤1：生成变异体</li><li>步骤2：通过已有样例杀死变异体</li><li>步骤3：处理剩余变异体<ul><li>情况1：等价变异体，暂不考虑</li><li>情况2：非等价变异体，补充测试集，尝试杀死该变异体</li></ul></li><li>记e为等价变异体的数量</li><li>变异分数：杀死的变异体数量 / 总变异体数量</li></ul><p><img src="/.space//3.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>步骤1：如果变异分数为1，可以使用其他的技术或不同的变异体集合来强化测试集T</li><li>步骤2：如果变异分数&lt;1，那么一定还有存活的变异体，需要设计新的测试样例来区分源程序与这些变异体</li><li>步骤3：因此为了区分这些变异体，就需要设计新的测试样例</li><li>步骤4：如果测试样例t0不能杀死变异体m，那么就需要设计新的变异体t来区分源程序和m</li><li>步骤5：一个测试样例可能会同时击杀多个变异体</li><li>步骤6：将新的测试样例加入到测试集中，重新计算变异分数</li><li>重复上述步骤直到满足停止测试的标准</li></ul><p><strong>变异测试不但能判断测试集是否充分，也能帮助我们检查出程序中的原始错误</strong></p><p><strong>变异体也需要满足RIPR模型，才能正确的反应充分性的源程序中的错误</strong></p><p><img src="/.space//4.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>目前还无法自动化的识别等价变异体，基本采取人工的方法<ul><li>手动、耗时、耗力</li></ul></li><li>不同程序的等价变异体也有很大区别<ul><li>一些研究表示一个程序生成的变异体中约有5%为等价变异体</li></ul></li></ul><h3 id="变异算子-mutation-operator"><a class="markdownIt-Anchor" href="#变异算子-mutation-operator"></a> 变异算子 - Mutation Operator</h3><ul><li>变异算子简单改变源程序得到程序的变异体<ul><li>变量替换</li><li>改变运算符</li><li>0</li><li>…</li></ul></li></ul><p><img src="/.space//5.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>一阶变异：First Order - 每一次变异只做一次改动</li><li>二阶变异：Second Order - 每一次变异做两次改动</li><li>…</li><li>高阶变异：Higher Order - 每一次变异做若干次改动</li><li>在实践当中，通常使用一阶变异<ul><li>对很多程序来讲已经足够了</li><li>高阶变异产生的错误呈指数型增长</li></ul></li><li>变异算子由人工设计<ul><li>专业人士和新手都会犯错</li></ul></li><li>变异算子的优劣<ul><li>非正式定义：变异算子集S1比S2好&lt;=&gt;使用S1生成的变异体所检测出来程序中的问题比S2多</li></ul></li><li>实际操作中我们一般使用一小部分高效的变异算子，而不是用所有变异算子<ul><li>选择所有变异算子代价较大</li><li>现在有一些研究提出有选择的使用变异算子</li></ul></li></ul><h2 id="高质量程序员假说-cph"><a class="markdownIt-Anchor" href="#高质量程序员假说-cph"></a> 高质量程序员假说 - CPH</h2><ul><li>Competent Programmer Hypothesis</li><li>优秀的程序员所写的程序也有有bug，但是可能与正确的程序相差较小</li><li>所以由优秀的程序员开发的程序中的错误应更容易被变异测试检测到<ul><li>更容易被低阶变异体检测到</li><li>通常为一阶变异体</li></ul></li></ul><h2 id="变异测试总结"><a class="markdownIt-Anchor" href="#变异测试总结"></a> 变异测试总结</h2><p><img src="/.space//6.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>变异测试是目前在实践中评估和提升测试集最强大最有效的方法</li><li>在好的工具的帮助下，与其他评估技术相似，变异测试必须支持增量式的测试方法<ul><li>增量式的生成变异体</li><li>增量式的选择变异算子</li></ul></li><li>等价变异体的识别仍是一个难题，这与在基于测试评估的控制流或数据流中识别不可行路径相似，都是不可判定的问题</li><li>尽管变异测试适用于单元测试。在好的工具的支持下，以及增量式开发的前提下，也可以被用于对整个系统或是其他形式的软件进行测试</li><li>变异测试的代价较高，所以并不是所有系统都会用到变异测试。如果涉及到高可用、高安全的系统时，往往会采用变异测试来确保软件质量</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>软件测试03 - 单元测试和测试覆盖</title>
    <link href="/Post/JuniorSecondSemester/SoftwareTesting/Chapter/Chapter3/"/>
    <url>/Post/JuniorSecondSemester/SoftwareTesting/Chapter/Chapter3/</url>
    
    <content type="html"><![CDATA[<h1 id="chapter03-unit-testing-test-coverage"><a class="markdownIt-Anchor" href="#chapter03-unit-testing-test-coverage"></a> Chapter03 - Unit Testing &amp; Test Coverage</h1><h2 id="测试自动化-test-automation"><a class="markdownIt-Anchor" href="#测试自动化-test-automation"></a> 测试自动化 - Test Automation</h2><blockquote><p>Test Automation</p></blockquote><ul><li>使用软件执行测试，自动对比实际输出和预期结果，配置测试环境，控制测试流程，自动分析测试结果并汇报</li><li>减少成本<ul><li>人工</li><li>时间</li><li>金钱</li></ul></li><li>减少人工操作引入的错误</li><li>减少不同个体测试质量的差异</li><li>显著减少回归测试的成本<ul><li>每一个版本都要执行的测试用例</li></ul></li></ul><blockquote><p>Software Testability：软件可测性</p></blockquote><p>用来评估测试用例揭露软件故障的程度</p><ul><li>Plainly Speaking：找到软件中错误的难度</li><li>软件可测性的两个主要的实际问题<ul><li>如何向软件提供测试输入</li><li>如何观察测试执行的结果</li></ul></li></ul><blockquote><p>Observability：可观察性</p></blockquote><ul><li>观察程序行为的难易程度</li><li>程序行为包括<ul><li>程序的输出</li><li>程序对环境的影响</li><li>程序对其他硬件和软件的影响</li></ul></li><li>可以理解为程序执行的&quot;副作用&quot;</li></ul><blockquote><p>Controllability：软件可控性</p></blockquote><ul><li>向程序提供所需输入的难易程度<ul><li>测试人员能否轻易的给程序提供输入样例</li></ul></li><li>例如从硬件感应器或分布式软件中得到输入值是较为困难的</li></ul><blockquote><p>Test Case：测试样例</p></blockquote><ul><li>一个测试样例包含多个具有明确功能和结构的部分</li><li>主要包括：<ul><li>输入值：Input Value</li><li>预期值：Expected / Oracle</li></ul></li><li>前缀值：Prefix<ul><li>测试之前需要完成的操作</li><li>例如选课系统测试前需要进行登录</li></ul></li><li>后缀值：Postfix<ul><li>测试之后需要完成的操作</li><li>例如选课系统测试后需要登出用户</li><li>后缀值还包括<ul><li>验证值：Verification<ul><li>查看测试样例的输出所需要的值</li></ul></li><li>退出值：Exit<ul><li>终止程序或使程序回到稳定状态的值或命令</li></ul></li></ul></li></ul></li></ul><h2 id="测试覆盖-test-coverage"><a class="markdownIt-Anchor" href="#测试覆盖-test-coverage"></a> 测试覆盖 - Test Coverage</h2><ul><li><p>在上一章提到过，测试准则可以被归纳为以下四类</p><ul><li><p>图</p></li><li><p>逻辑表达式</p></li><li><p>输入域</p></li><li><p>语法描述</p></li></ul></li><li><p>上述结构可以从很多软件工件中提取得到</p><ul><li>图可以从UML图、用例、有限状态机、源代码中得到</li><li>逻辑表达式可以从源代码、条件、守卫中得到</li><li>…</li></ul></li><li><p>测试需求Requirement：测试用例需要满足或覆盖的条件</p></li><li><p>测试准则Criterion：对测试集提出测试要求的规则</p><ul><li>帮助我们设计测试需求</li></ul></li><li><p>在实践中，覆盖率不可能达到100%</p></li><li><p>覆盖等级</p><ul><li>测试中覆盖的需求 / 总的需求个数<ul><li>例如共有6种口味，样例中仅包含4种口味，则覆盖等级为4/6</li></ul></li><li>这里覆盖等级是可以达到100%的，但这并不能说明测试样例覆盖了所有情况</li></ul></li><li><p>生成器和识别器</p><ul><li>生成器：Generator - 自动化生成满足测试准则样例的过程</li><li>识别器：Recognizer - 判断测试集是否满足测试准测的过程</li><li>需要注意的是：判断测试样例是否符合测试准则(识别器)要比按照测试准则自动化生成测试样例(生成器)简单得多</li></ul></li><li><p>测试准则的比较</p><ul><li><p>若满足测试准则C1的测试样例同时满足C2，则C1 subsume C2</p><ul><li>这里subsume可以翻译为包含，其意义是测试准则C1生成的测试样例对程序的覆盖范围更大</li></ul></li><li><p>即可用C1代替C2；或者说C1要比C2好；或者说C1要比C2更加严格</p></li><li><p>以糖果为例，覆盖每一种口味的准则也一定满足覆盖每一种颜色，所以这里可以用口味代替颜色</p></li><li><p>如果测试样例覆盖了程序中的每一个分支，那么它也一定能够覆盖程序中的每一条语句？</p></li></ul></li><li><p>基于准则的测试设计的优势</p><ul><li><p>最大化投入产出比</p><ul><li>更少的测试找到更多的问题</li></ul></li><li><p>减少测试样例的重合程度</p></li><li><p>帮助实现从软件工件到测试的追踪？</p><ul><li><p>设计每一个测试用例的原因，解释测试用例的意义</p><ul><li>可以覆盖独一无二的语句，其他用例无法到达</li><li>…</li></ul></li><li><p>给回归测试提供内在支持，使回归测试更容易？</p><ul><li>当代码修改时不需要重新执行所有的测试用例，而是针对修改部分执行特定的一些测试用例</li></ul></li></ul></li><li><p>给测试人员提供判断何时停止测试的标准</p></li></ul></li><li><p>好的覆盖准则的特点</p><ol><li>自动化的衡量是否符合测试需求</li><li>指导我们更快的生成测试样例</li><li>测试结果可以尽可能多的揭露程序中的错误</li></ol></li><li><p>传统的测试准则</p><ul><li>价格昂贵</li><li>消耗大量人力资源</li></ul></li><li><p>形式化的覆盖准则可以帮助我们决定使用哪些测试样例</p><ul><li>帮助测试人员更容易找到软件中的问题</li><li>对软件的质量和可靠性有更高的保证</li><li>给软件测试提供了目标和停止条件</li><li>使得软件测试变得更高效、更有效</li></ul><ol><li>节约成本</li><li>能找到更多的错误</li><li>开发出更好的软件产品</li></ol></li></ul><p><img src="/.space//1.png" srcset="/img/404_GIF.gif" lazyload alt></p><p><strong>更早、更好的测试能够提高测试经理的能力</strong></p><h2 id="junit"><a class="markdownIt-Anchor" href="#junit"></a> JUnit</h2><blockquote><p>开源的单元测试框架</p><p><a href="https://junit.org/">JUnit官网</a> &amp; <a href="https://github.com/junit-team">Github仓库</a></p><p><a href="https://github.com/hamcrest/JavaHamcrest">Hamcrest</a>：JUnit扩展包</p><p><a href="https://www.eclemma.org/">Eclemma</a> &amp; <a href="https://www.jacoco.org/jacoco/">JaCoCo</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testMax</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// assertEquals(expected, actual);</span><br>    assertEquals(<span class="hljs-number">7</span>, max(<span class="hljs-number">3</span>,<span class="hljs-number">7</span>));<br>    assertEquals(<span class="hljs-number">3</span>, max(<span class="hljs-number">3</span>,-<span class="hljs-number">7</span>));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>软件测试02 - 基础</title>
    <link href="/Post/JuniorSecondSemester/SoftwareTesting/Chapter/Chapter2/"/>
    <url>/Post/JuniorSecondSemester/SoftwareTesting/Chapter/Chapter2/</url>
    
    <content type="html"><![CDATA[<h1 id="chapter02-foundations"><a class="markdownIt-Anchor" href="#chapter02-foundations"></a> Chapter02 - Foundations</h1><h2 id="软件测试术语terminology"><a class="markdownIt-Anchor" href="#软件测试术语terminology"></a> 软件测试术语Terminology</h2><blockquote><p>软件测试只能说明软件中存在错误，不能证明软件没有错误</p></blockquote><ul><li><strong>Fault</strong>：故障 - 软件中静态存在的缺陷，一般来说是导致其他错误出现的根因</li><li><strong>Error</strong>：错误 - 由于故障导致的系统内部状态的错误</li><li><strong>Failure</strong>：失败 - 与需求或其他描述中预期表现不符，由外部可以观察到的行为或症状</li></ul><p><img src="/.space//1.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>Example：病人看病<ul><li>症状：Failure - 流鼻涕、咳嗽</li><li>病因：Fault - 流行性感冒</li><li>体检：Error - 化验、血压、体温</li></ul></li></ul><h3 id="ripr模型"><a class="markdownIt-Anchor" href="#ripr模型"></a> RIPR模型</h3><blockquote><p>观测到Failure的四个条件</p></blockquote><ul><li>Reachability：可达性 - 测试用例能够到达程序中包含缺陷的语句</li><li>Infection：传染性 - 测试用例需要确保当执行到错误语句时，程序内部的状态也会发生错误<ul><li>这里可能会出现执行错误语句但结果正确的情况</li></ul></li><li>Propagation：传播性 - 传染性确保了程序内部的错误，而传播性值得是测试用例所导致的Error，同样会导致程序的Failure，使其产生错误的输出结果</li><li>Revealability：揭示性 - 测试者能够观察到错误的输出</li></ul><p><img src="/.space//2.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>在RIPR模型中，如果前面的某一个条件没有满足，那么后面的条件就不可能满足</li></ul><h3 id="testingdebugging"><a class="markdownIt-Anchor" href="#testingdebugging"></a> Testing&amp;Debugging</h3><ul><li>Testing：测试 - 观察软件的执行情况来评估该软件，检测软件中缺陷<ul><li>测试之前不知道是否存在缺陷，不知道缺陷存在的位置</li></ul></li><li>Test Failure：由测试用例导致的失败</li><li>Debugging：测试之后的过程，测试可知软件中存在错误，然后通过Debug来定位故障根因</li><li>需要注意的是，并不是所有测试用例都会导致程序失败</li></ul><h3 id="错误定位"><a class="markdownIt-Anchor" href="#错误定位"></a> 错误定位</h3><ul><li><strong>基于频谱的错误定位</strong><ul><li>使用最广泛的自动化错误定位方法</li><li>形式简单，效果较好</li></ul></li><li>程序频谱：Program Spectrum<ul><li>指的是程序执行过程中的统计量</li><li>主要用到的频谱信息为测试覆盖信息</li></ul></li><li>基本思想<ul><li>被失败的测试用例执行的程序元素，更有可能有错误</li><li>被成功的测试用例执行的程序元素，更有可能没有错误</li></ul></li><li>程序元素可以定义在不同的粒度上<ul><li>基本块</li><li>方法</li><li>类</li><li>文件</li><li>语句</li><li>表达式</li><li>变量</li></ul></li></ul><h3 id="计算程序元素的可疑度"><a class="markdownIt-Anchor" href="#计算程序元素的可疑度"></a> 计算程序元素的可疑度</h3><p><img src="/.space//3.png" srcset="/img/404_GIF.gif" lazyload alt></p><p><img src="/.space//4.png" srcset="/img/404_GIF.gif" lazyload alt></p><p><img src="/.space//5.png" srcset="/img/404_GIF.gif" lazyload alt></p><h3 id="常见软件故障"><a class="markdownIt-Anchor" href="#常见软件故障"></a> 常见软件故障</h3><ul><li>算数错误<ul><li>除0</li><li>溢出</li><li>浮点数精度损失</li></ul></li><li>逻辑故障<ul><li>死循环</li><li>无限递归</li><li>循环次数有误</li></ul></li><li>语法故障<ul><li>写错操作符</li></ul></li><li>资源故障<ul><li>空指针引用</li><li>变量未初始化</li><li>资源泄漏</li></ul></li><li>多线程故障<ul><li>死锁</li><li>并发</li></ul></li><li>性能故障<ul><li>复杂度</li><li>磁盘访问</li></ul></li><li>接口故障<ul><li>方法错误</li><li>协议错误</li></ul></li><li>团队合作故障</li></ul><h2 id="软件测试活动activities"><a class="markdownIt-Anchor" href="#软件测试活动activities"></a> 软件测试活动Activities</h2><ul><li>Test Engineer：测试工程师 - 负责单个或多个测试活动的IT领域工作者<ul><li>设计测试用例</li><li>生成测试用例</li><li>运行测试脚本</li><li>分析测试结果</li><li>汇报测试结果</li></ul></li><li>Test Manager：测试经理 - 负责管理一名或多名Test Engineers<ul><li>制定测试策略和流程</li><li>与项目中其他项目经理沟通交流</li><li>帮助组内测试工程师高效地测试软件</li></ul></li></ul><h3 id="传统测试等级"><a class="markdownIt-Anchor" href="#传统测试等级"></a> 传统测试等级</h3><ul><li>单元测试</li><li>模块测试<ul><li>类、文件、模块、组件</li></ul></li><li>集成测试<ul><li>模块间交互</li></ul></li><li>系统测试<ul><li>系统所有模块结合</li></ul></li><li>验收测试<ul><li>测试用户</li><li>是否符合预期要求</li></ul></li></ul><h3 id="面向对象测试等级"><a class="markdownIt-Anchor" href="#面向对象测试等级"></a> 面向对象测试等级</h3><ul><li>函数内测试：Intra-Method</li><li>函数间测试：Inter-Method</li><li>类内测试：Intra-Class</li><li>类间测试：Inter-Class</li></ul><p><img src="/.space//6.png" srcset="/img/404_GIF.gif" lazyload alt></p><h3 id="覆盖准则"><a class="markdownIt-Anchor" href="#覆盖准则"></a> 覆盖准则</h3><ul><li>一个很小很简单的程序也有很多种输入，测试空间非常大甚至有无限种<ul><li>因此无法测试其全部情况</li></ul></li><li>测试人员需要在巨大的测试空间中找到有限的测试样例<ul><li>尽量通过更少的测试样例发现更多的问题</li><li>如果搜索测试空间？</li><li>什么时候停止搜索？</li></ul></li><li>覆盖准则提供了结构化、实用化的方法来帮助我们搜索测试空间<ul><li>尽量覆盖所有语句，查找可能会覆盖之前测试用例没有到达的语句</li><li>不同测试样例中减少重叠的情况</li></ul></li><li>测试准则的优势<ul><li>收益最大化：用尽量少的样例找到尽量多的问题</li><li>回归测试：Regression<ul><li>上一个版本的测试用例，在新版本中重新测试，确保功能不受影响</li></ul></li><li>给测试人员提供一个停止测试的标准<ul><li>例如覆盖率达97%</li></ul></li></ul></li></ul><h3 id="测试需求和测试准则"><a class="markdownIt-Anchor" href="#测试需求和测试准则"></a> 测试需求和测试准则</h3><ul><li>测试需求：测试用例必须要满足或者覆盖的所指定的元素<ul><li>每一条语句</li><li>每一个功能</li></ul></li><li>测试准则：一条或一组生成测试需求的原则<ul><li>覆盖每一条语句</li><li>覆盖每一个功能</li></ul></li><li>测试人员已经定义了很多测试准则，可以被归纳为以下四类<ul><li>图</li><li>逻辑表达式</li><li>输入域</li><li>语法描述</li></ul></li></ul><h3 id="模型驱动的测试设计"><a class="markdownIt-Anchor" href="#模型驱动的测试设计"></a> 模型驱动的测试设计</h3><ul><li><p>MDTD：Model Driven Test Design</p></li><li><p>测试设计是设计输入值并且能够有效执行软件测试的过程</p></li><li><p>测试设计是一种软件测试活动</p></li><li><p>步骤</p><ul><li>测试设计<ul><li>基于准则</li><li>基于人工</li></ul></li><li>测试自动化</li><li>执行测试用例</li><li>测试结果评估</li></ul></li><li><p>不同的步骤所需要的技能、背景、知识、教育和训练也不同</p><ul><li>所以开发团队中让同一组人员进行所有步骤是不合理的</li></ul></li><li><p>其他测试活动</p><ul><li>测试管理</li><li>测试维护</li><li>测试文档</li></ul></li><li><p>实践中的MDTD</p><ul><li>由一个测试人来设计测试</li><li>然后测试人员和编程人员可以分别负责不同的测试活动</li><li>可以通过控制流图来设计测试用例<ul><li>满足相应的测试需求</li></ul></li></ul></li></ul><p><img src="/.space//7.png" srcset="/img/404_GIF.gif" lazyload alt></p><p><img src="/.space//8.png" srcset="/img/404_GIF.gif" lazyload alt></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>软件测试01 - 介绍</title>
    <link href="/Post/JuniorSecondSemester/SoftwareTesting/Chapter/Chapter1/"/>
    <url>/Post/JuniorSecondSemester/SoftwareTesting/Chapter/Chapter1/</url>
    
    <content type="html"><![CDATA[<h1 id="chapter01-introduction"><a class="markdownIt-Anchor" href="#chapter01-introduction"></a> Chapter01 - Introduction</h1><h2 id="对于软件故障我们能做什么"><a class="markdownIt-Anchor" href="#对于软件故障我们能做什么"></a> 对于软件故障我们能做什么？</h2><ul><li>我们不能完全避免软件故障</li><li>但是我们可以降低软件故障的风险<ul><li>更好的需求分析</li><li>更好的软件设计</li><li>更好的开发过程</li><li>更好的项目管理</li><li>更好的软件测试</li><li>…</li></ul></li></ul><h2 id="为什么要做软件测试"><a class="markdownIt-Anchor" href="#为什么要做软件测试"></a> 为什么要做软件测试？</h2><p>测试人员的目的是尽早消除软件中的错误</p><ul><li>提高软件质量</li><li>减少修改代价</li><li>维护用户满意度</li></ul><h2 id="这意味着什么"><a class="markdownIt-Anchor" href="#这意味着什么"></a> 这意味着什么？</h2><p>软件测试变得越来越重要</p><h2 id="什么是软件测试"><a class="markdownIt-Anchor" href="#什么是软件测试"></a> 什么是软件测试？</h2><p><strong>Verification + Validation(验证和确认)</strong></p><p><img src="/.space//1.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>验证为通过软件说明书在开发团队内部判断软件产品是否正确</li><li>确认是与用户进行沟通判断软件产品是否符合预期要求</li></ul><h2 id="基于测试成熟度的测试目标"><a class="markdownIt-Anchor" href="#基于测试成熟度的测试目标"></a> 基于测试成熟度的测试目标</h2><ul><li>LV0：软件测试等同于debugging<ul><li>软件测试应》debugging</li></ul></li><li>LV1：测试的目的就是展示软件的正确性<ul><li>无法证明，只能说明软件产品在测试用例中的正确性</li></ul></li><li>LV2：测试的目的就是找到软件中的故障<ul><li>具有一定负面影响，导致开发组与测试组对立</li></ul></li><li>LV3：测试的目的并不是要证明具体的正确或失败，而是为了降低使用软件产品的风险<ul><li>公认软件中风险一定存在</li></ul></li><li>LV4：测试是一种帮助所有IT领域工作者开发更高质量软件产品的一种思想<ul><li>拼写检查器被用于检测拼写错误，但其目的是为了提高人们拼写能力</li></ul></li></ul><h2 id="为什么要学习软件测试"><a class="markdownIt-Anchor" href="#为什么要学习软件测试"></a> 为什么要学习软件测试？</h2><ul><li>软件测试岗位需求大</li><li>提高自身软件开发能力</li><li>开发与测试无法分离</li></ul><p><img src="/.space//2.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>更专业地开发软件<ul><li>专业人员<ul><li>按需完成</li><li>按时完成</li><li>保质完成</li><li>风险可控</li></ul></li><li>业余人员<ul><li>靠英雄</li><li>靠运气</li><li>浪费</li><li>不可控</li></ul></li></ul></li></ul><p><img src="/.space//3.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>全方位的提升<ul><li>全栈技术<ul><li>编程、数据库、网络、操作系统、软件分析、计算、大数据、人工智能…</li></ul></li><li>批判性思维</li><li>责任</li><li>沟通技巧</li><li>全方位思考</li></ul></li><li>质量思维<ul><li>不仅在软件领域</li><li>生活、学习…</li></ul></li><li>软件测试的实践与科研紧密相关<ul><li>测试用例自动化生成</li><li>自动化执行测试</li><li>测试优化<ul><li>测试用例化简</li><li>测试用例排序</li><li>测试用例最小化</li></ul></li><li>错误定位</li><li>自动化修复</li><li>缺陷预测</li></ul></li></ul><h2 id="从软件测试可以学到什么"><a class="markdownIt-Anchor" href="#从软件测试可以学到什么"></a> 从软件测试可以学到什么？</h2><p><img src="/.space//4.png" srcset="/img/404_GIF.gif" lazyload alt></p><ul><li>测试覆盖<ul><li>图覆盖Graph</li><li>逻辑覆盖Logic</li><li>Input Partition Coverage</li><li>Syntax Coverage</li></ul></li><li>测试设计与执行<ul><li>单元测试Unit</li><li>接口测试Interface</li><li>集成测试Integration</li><li>压力测试Load</li></ul></li><li>测试驱动开发</li><li>常见工具<ul><li>JUnit</li><li>Selenium</li><li>JMeter</li></ul></li><li>前沿话题<ul><li>错误定位</li><li>符号执行</li><li>变异测试</li><li>测试用例自动化生成</li></ul></li></ul><h2 id="如何学习软件测试"><a class="markdownIt-Anchor" href="#如何学习软件测试"></a> 如何学习软件测试？</h2>]]></content>
    
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>关于About</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
